{"version":3,"file":"pipe_resolver_mock.js","sourceRoot":"","sources":["../../../../../../packages/compiler/testing/src/pipe_resolver_mock.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,OAAO,EAAmB,YAAY,EAAO,MAAM,mBAAmB,CAAC;AAEvE;IAAsC,4CAAY;IAGhD,0BAAY,QAA0B;QAAtC,YAA0C,kBAAM,QAAQ,CAAC,SAAG;QAFpD,YAAM,GAAG,IAAI,GAAG,EAAwB,CAAC;;IAEU,CAAC;IAE5D;;OAEG;IACH,kCAAO,GAAP,UAAQ,IAAe,EAAE,QAAmB,IAAU,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;IAExF;;;;;OAKG;IACH,kCAAO,GAAP,UAAQ,IAAe,EAAE,eAAsB;QAAtB,gCAAA,EAAA,sBAAsB;QAC7C,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,CAAC,QAAQ,EAAE;YACb,QAAQ,GAAG,iBAAM,OAAO,YAAC,IAAI,EAAE,eAAe,CAAG,CAAC;SACnD;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IACH,uBAAC;AAAD,CAAC,AAvBD,CAAsC,YAAY,GAuBjD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector, PipeResolver, core} from '@angular/compiler';\n\nexport class MockPipeResolver extends PipeResolver {\n  private _pipes = new Map<core.Type, core.Pipe>();\n\n  constructor(refector: CompileReflector) { super(refector); }\n\n  /**\n   * Overrides the {@link Pipe} for a pipe.\n   */\n  setPipe(type: core.Type, metadata: core.Pipe): void { this._pipes.set(type, metadata); }\n\n  /**\n   * Returns the {@link Pipe} for a pipe:\n   * - Set the {@link Pipe} to the overridden view when it exists or fallback to the\n   * default\n   * `PipeResolver`, see `setPipe`.\n   */\n  resolve(type: core.Type, throwIfNotFound = true): core.Pipe {\n    let metadata = this._pipes.get(type);\n    if (!metadata) {\n      metadata = super.resolve(type, throwIfNotFound) !;\n    }\n    return metadata;\n  }\n}\n"]}