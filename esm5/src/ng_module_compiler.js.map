{"version":3,"file":"ng_module_compiler.js","sourceRoot":"","sources":["../../../../../packages/compiler/src/ng_module_compiler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileNgModuleMetadata, CompileProviderMetadata, identifierName} from './compile_metadata';\nimport {CompileReflector} from './compile_reflector';\nimport {NodeFlags} from './core';\nimport {Identifiers} from './identifiers';\nimport * as o from './output/output_ast';\nimport {typeSourceSpan} from './parse_util';\nimport {NgModuleProviderAnalyzer} from './provider_analyzer';\nimport {OutputContext} from './util';\nimport {componentFactoryResolverProviderDef, depDef, providerDef} from './view_compiler/provider_compiler';\n\nexport class NgModuleCompileResult {\n  constructor(public ngModuleFactoryVar: string) {}\n}\n\nconst LOG_VAR = o.variable('_l');\n\nexport class NgModuleCompiler {\n  constructor(private reflector: CompileReflector) {}\n  compile(\n      ctx: OutputContext, ngModuleMeta: CompileNgModuleMetadata,\n      extraProviders: CompileProviderMetadata[]): NgModuleCompileResult {\n    const sourceSpan = typeSourceSpan('NgModule', ngModuleMeta.type);\n    const entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents;\n    const bootstrapComponents = ngModuleMeta.bootstrapComponents;\n    const providerParser =\n        new NgModuleProviderAnalyzer(this.reflector, ngModuleMeta, extraProviders, sourceSpan);\n    const providerDefs =\n        [componentFactoryResolverProviderDef(\n             this.reflector, ctx, NodeFlags.None, entryComponentFactories)]\n            .concat(providerParser.parse().map((provider) => providerDef(ctx, provider)))\n            .map(({providerExpr, depsExpr, flags, tokenExpr}) => {\n              return o.importExpr(Identifiers.moduleProviderDef).callFn([\n                o.literal(flags), tokenExpr, providerExpr, depsExpr\n              ]);\n            });\n\n    const ngModuleDef = o.importExpr(Identifiers.moduleDef).callFn([o.literalArr(providerDefs)]);\n    const ngModuleDefFactory = o.fn(\n        [new o.FnParam(LOG_VAR.name !)], [new o.ReturnStatement(ngModuleDef)], o.INFERRED_TYPE);\n\n    const ngModuleFactoryVar = `${identifierName(ngModuleMeta.type)}NgFactory`;\n    this._createNgModuleFactory(\n        ctx, ngModuleMeta.type.reference, o.importExpr(Identifiers.createModuleFactory).callFn([\n          ctx.importExpr(ngModuleMeta.type.reference),\n          o.literalArr(bootstrapComponents.map(id => ctx.importExpr(id.reference))),\n          ngModuleDefFactory\n        ]));\n\n    if (ngModuleMeta.id) {\n      const id = typeof ngModuleMeta.id === 'string' ? o.literal(ngModuleMeta.id) :\n                                                       ctx.importExpr(ngModuleMeta.id);\n      const registerFactoryStmt = o.importExpr(Identifiers.RegisterModuleFactoryFn)\n                                      .callFn([id, o.variable(ngModuleFactoryVar)])\n                                      .toStmt();\n      ctx.statements.push(registerFactoryStmt);\n    }\n\n    return new NgModuleCompileResult(ngModuleFactoryVar);\n  }\n\n  createStub(ctx: OutputContext, ngModuleReference: any) {\n    this._createNgModuleFactory(ctx, ngModuleReference, o.NULL_EXPR);\n  }\n\n  private _createNgModuleFactory(ctx: OutputContext, reference: any, value: o.Expression) {\n    const ngModuleFactoryVar = `${identifierName({reference: reference})}NgFactory`;\n    const ngModuleFactoryStmt =\n        o.variable(ngModuleFactoryVar)\n            .set(value)\n            .toDeclStmt(\n                o.importType(\n                    Identifiers.NgModuleFactory, [o.expressionType(ctx.importExpr(reference)) !],\n                    [o.TypeModifier.Const]),\n                [o.StmtModifier.Final, o.StmtModifier.Exported]);\n\n    ctx.statements.push(ngModuleFactoryStmt);\n  }\n}\n"]}