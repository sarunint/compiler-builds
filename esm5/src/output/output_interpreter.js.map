{"version":3,"file":"output_interpreter.js","sourceRoot":"","sources":["../../../../../../packages/compiler/src/output/output_interpreter.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\nimport {CompileReflector} from '../compile_reflector';\n\nimport * as o from './output_ast';\nimport {debugOutputAstAsTypeScript} from './ts_emitter';\n\nexport function interpretStatements(\n    statements: o.Statement[], reflector: CompileReflector): {[key: string]: any} {\n  const ctx = new _ExecutionContext(null, null, null, new Map<string, any>());\n  const visitor = new StatementInterpreter(reflector);\n  visitor.visitAllStatements(statements, ctx);\n  const result: {[key: string]: any} = {};\n  ctx.exports.forEach((exportName) => { result[exportName] = ctx.vars.get(exportName); });\n  return result;\n}\n\nfunction _executeFunctionStatements(\n    varNames: string[], varValues: any[], statements: o.Statement[], ctx: _ExecutionContext,\n    visitor: StatementInterpreter): any {\n  const childCtx = ctx.createChildWihtLocalVars();\n  for (let i = 0; i < varNames.length; i++) {\n    childCtx.vars.set(varNames[i], varValues[i]);\n  }\n  const result = visitor.visitAllStatements(statements, childCtx);\n  return result ? result.value : null;\n}\n\nclass _ExecutionContext {\n  exports: string[] = [];\n\n  constructor(\n      public parent: _ExecutionContext|null, public instance: any, public className: string|null,\n      public vars: Map<string, any>) {}\n\n  createChildWihtLocalVars(): _ExecutionContext {\n    return new _ExecutionContext(this, this.instance, this.className, new Map<string, any>());\n  }\n}\n\nclass ReturnValue {\n  constructor(public value: any) {}\n}\n\nfunction createDynamicClass(\n    _classStmt: o.ClassStmt, _ctx: _ExecutionContext, _visitor: StatementInterpreter): Function {\n  const propertyDescriptors: {[key: string]: any} = {};\n\n  _classStmt.getters.forEach((getter: o.ClassGetter) => {\n    // Note: use `function` instead of arrow function to capture `this`\n    propertyDescriptors[getter.name] = {\n      configurable: false,\n      get: function() {\n        const instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n        return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);\n      }\n    };\n  });\n  _classStmt.methods.forEach(function(method: o.ClassMethod) {\n    const paramNames = method.params.map(param => param.name);\n    // Note: use `function` instead of arrow function to capture `this`\n    propertyDescriptors[method.name !] = {\n      writable: false,\n      configurable: false,\n      value: function(...args: any[]) {\n        const instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n        return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);\n      }\n    };\n  });\n\n  const ctorParamNames = _classStmt.constructorMethod.params.map(param => param.name);\n  // Note: use `function` instead of arrow function to capture `this`\n  const ctor = function(...args: any[]) {\n    const instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n    _classStmt.fields.forEach((field) => { this[field.name] = undefined; });\n    _executeFunctionStatements(\n        ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);\n  };\n  const superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;\n  ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);\n  return ctor;\n}\n\nclass StatementInterpreter implements o.StatementVisitor, o.ExpressionVisitor {\n  constructor(private reflector: CompileReflector) {}\n  debugAst(ast: o.Expression|o.Statement|o.Type): string { return debugOutputAstAsTypeScript(ast); }\n\n  visitDeclareVarStmt(stmt: o.DeclareVarStmt, ctx: _ExecutionContext): any {\n    const initialValue = stmt.value ? stmt.value.visitExpression(this, ctx) : undefined;\n    ctx.vars.set(stmt.name, initialValue);\n    if (stmt.hasModifier(o.StmtModifier.Exported)) {\n      ctx.exports.push(stmt.name);\n    }\n    return null;\n  }\n  visitWriteVarExpr(expr: o.WriteVarExpr, ctx: _ExecutionContext): any {\n    const value = expr.value.visitExpression(this, ctx);\n    let currCtx = ctx;\n    while (currCtx != null) {\n      if (currCtx.vars.has(expr.name)) {\n        currCtx.vars.set(expr.name, value);\n        return value;\n      }\n      currCtx = currCtx.parent !;\n    }\n    throw new Error(`Not declared variable ${expr.name}`);\n  }\n  visitWrappedNodeExpr(ast: o.WrappedNodeExpr<any>, ctx: _ExecutionContext): never {\n    throw new Error('Cannot interpret a WrappedNodeExpr.');\n  }\n  visitTypeofExpr(ast: o.TypeofExpr, ctx: _ExecutionContext): never {\n    throw new Error('Cannot interpret a TypeofExpr');\n  }\n  visitReadVarExpr(ast: o.ReadVarExpr, ctx: _ExecutionContext): any {\n    let varName = ast.name !;\n    if (ast.builtin != null) {\n      switch (ast.builtin) {\n        case o.BuiltinVar.Super:\n          return ctx.instance.__proto__;\n        case o.BuiltinVar.This:\n          return ctx.instance;\n        case o.BuiltinVar.CatchError:\n          varName = CATCH_ERROR_VAR;\n          break;\n        case o.BuiltinVar.CatchStack:\n          varName = CATCH_STACK_VAR;\n          break;\n        default:\n          throw new Error(`Unknown builtin variable ${ast.builtin}`);\n      }\n    }\n    let currCtx = ctx;\n    while (currCtx != null) {\n      if (currCtx.vars.has(varName)) {\n        return currCtx.vars.get(varName);\n      }\n      currCtx = currCtx.parent !;\n    }\n    throw new Error(`Not declared variable ${varName}`);\n  }\n  visitWriteKeyExpr(expr: o.WriteKeyExpr, ctx: _ExecutionContext): any {\n    const receiver = expr.receiver.visitExpression(this, ctx);\n    const index = expr.index.visitExpression(this, ctx);\n    const value = expr.value.visitExpression(this, ctx);\n    receiver[index] = value;\n    return value;\n  }\n  visitWritePropExpr(expr: o.WritePropExpr, ctx: _ExecutionContext): any {\n    const receiver = expr.receiver.visitExpression(this, ctx);\n    const value = expr.value.visitExpression(this, ctx);\n    receiver[expr.name] = value;\n    return value;\n  }\n\n  visitInvokeMethodExpr(expr: o.InvokeMethodExpr, ctx: _ExecutionContext): any {\n    const receiver = expr.receiver.visitExpression(this, ctx);\n    const args = this.visitAllExpressions(expr.args, ctx);\n    let result: any;\n    if (expr.builtin != null) {\n      switch (expr.builtin) {\n        case o.BuiltinMethod.ConcatArray:\n          result = receiver.concat(...args);\n          break;\n        case o.BuiltinMethod.SubscribeObservable:\n          result = receiver.subscribe({next: args[0]});\n          break;\n        case o.BuiltinMethod.Bind:\n          result = receiver.bind(...args);\n          break;\n        default:\n          throw new Error(`Unknown builtin method ${expr.builtin}`);\n      }\n    } else {\n      result = receiver[expr.name !].apply(receiver, args);\n    }\n    return result;\n  }\n  visitInvokeFunctionExpr(stmt: o.InvokeFunctionExpr, ctx: _ExecutionContext): any {\n    const args = this.visitAllExpressions(stmt.args, ctx);\n    const fnExpr = stmt.fn;\n    if (fnExpr instanceof o.ReadVarExpr && fnExpr.builtin === o.BuiltinVar.Super) {\n      ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);\n      return null;\n    } else {\n      const fn = stmt.fn.visitExpression(this, ctx);\n      return fn.apply(null, args);\n    }\n  }\n  visitReturnStmt(stmt: o.ReturnStatement, ctx: _ExecutionContext): any {\n    return new ReturnValue(stmt.value.visitExpression(this, ctx));\n  }\n  visitDeclareClassStmt(stmt: o.ClassStmt, ctx: _ExecutionContext): any {\n    const clazz = createDynamicClass(stmt, ctx, this);\n    ctx.vars.set(stmt.name, clazz);\n    if (stmt.hasModifier(o.StmtModifier.Exported)) {\n      ctx.exports.push(stmt.name);\n    }\n    return null;\n  }\n  visitExpressionStmt(stmt: o.ExpressionStatement, ctx: _ExecutionContext): any {\n    return stmt.expr.visitExpression(this, ctx);\n  }\n  visitIfStmt(stmt: o.IfStmt, ctx: _ExecutionContext): any {\n    const condition = stmt.condition.visitExpression(this, ctx);\n    if (condition) {\n      return this.visitAllStatements(stmt.trueCase, ctx);\n    } else if (stmt.falseCase != null) {\n      return this.visitAllStatements(stmt.falseCase, ctx);\n    }\n    return null;\n  }\n  visitTryCatchStmt(stmt: o.TryCatchStmt, ctx: _ExecutionContext): any {\n    try {\n      return this.visitAllStatements(stmt.bodyStmts, ctx);\n    } catch (e) {\n      const childCtx = ctx.createChildWihtLocalVars();\n      childCtx.vars.set(CATCH_ERROR_VAR, e);\n      childCtx.vars.set(CATCH_STACK_VAR, e.stack);\n      return this.visitAllStatements(stmt.catchStmts, childCtx);\n    }\n  }\n  visitThrowStmt(stmt: o.ThrowStmt, ctx: _ExecutionContext): any {\n    throw stmt.error.visitExpression(this, ctx);\n  }\n  visitCommentStmt(stmt: o.CommentStmt, context?: any): any { return null; }\n  visitJSDocCommentStmt(stmt: o.JSDocCommentStmt, context?: any): any { return null; }\n  visitInstantiateExpr(ast: o.InstantiateExpr, ctx: _ExecutionContext): any {\n    const args = this.visitAllExpressions(ast.args, ctx);\n    const clazz = ast.classExpr.visitExpression(this, ctx);\n    return new clazz(...args);\n  }\n  visitLiteralExpr(ast: o.LiteralExpr, ctx: _ExecutionContext): any { return ast.value; }\n  visitExternalExpr(ast: o.ExternalExpr, ctx: _ExecutionContext): any {\n    return this.reflector.resolveExternalReference(ast.value);\n  }\n  visitConditionalExpr(ast: o.ConditionalExpr, ctx: _ExecutionContext): any {\n    if (ast.condition.visitExpression(this, ctx)) {\n      return ast.trueCase.visitExpression(this, ctx);\n    } else if (ast.falseCase != null) {\n      return ast.falseCase.visitExpression(this, ctx);\n    }\n    return null;\n  }\n  visitNotExpr(ast: o.NotExpr, ctx: _ExecutionContext): any {\n    return !ast.condition.visitExpression(this, ctx);\n  }\n  visitAssertNotNullExpr(ast: o.AssertNotNull, ctx: _ExecutionContext): any {\n    return ast.condition.visitExpression(this, ctx);\n  }\n  visitCastExpr(ast: o.CastExpr, ctx: _ExecutionContext): any {\n    return ast.value.visitExpression(this, ctx);\n  }\n  visitFunctionExpr(ast: o.FunctionExpr, ctx: _ExecutionContext): any {\n    const paramNames = ast.params.map((param) => param.name);\n    return _declareFn(paramNames, ast.statements, ctx, this);\n  }\n  visitDeclareFunctionStmt(stmt: o.DeclareFunctionStmt, ctx: _ExecutionContext): any {\n    const paramNames = stmt.params.map((param) => param.name);\n    ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));\n    if (stmt.hasModifier(o.StmtModifier.Exported)) {\n      ctx.exports.push(stmt.name);\n    }\n    return null;\n  }\n  visitBinaryOperatorExpr(ast: o.BinaryOperatorExpr, ctx: _ExecutionContext): any {\n    const lhs = () => ast.lhs.visitExpression(this, ctx);\n    const rhs = () => ast.rhs.visitExpression(this, ctx);\n\n    switch (ast.operator) {\n      case o.BinaryOperator.Equals:\n        return lhs() == rhs();\n      case o.BinaryOperator.Identical:\n        return lhs() === rhs();\n      case o.BinaryOperator.NotEquals:\n        return lhs() != rhs();\n      case o.BinaryOperator.NotIdentical:\n        return lhs() !== rhs();\n      case o.BinaryOperator.And:\n        return lhs() && rhs();\n      case o.BinaryOperator.Or:\n        return lhs() || rhs();\n      case o.BinaryOperator.Plus:\n        return lhs() + rhs();\n      case o.BinaryOperator.Minus:\n        return lhs() - rhs();\n      case o.BinaryOperator.Divide:\n        return lhs() / rhs();\n      case o.BinaryOperator.Multiply:\n        return lhs() * rhs();\n      case o.BinaryOperator.Modulo:\n        return lhs() % rhs();\n      case o.BinaryOperator.Lower:\n        return lhs() < rhs();\n      case o.BinaryOperator.LowerEquals:\n        return lhs() <= rhs();\n      case o.BinaryOperator.Bigger:\n        return lhs() > rhs();\n      case o.BinaryOperator.BiggerEquals:\n        return lhs() >= rhs();\n      default:\n        throw new Error(`Unknown operator ${ast.operator}`);\n    }\n  }\n  visitReadPropExpr(ast: o.ReadPropExpr, ctx: _ExecutionContext): any {\n    let result: any;\n    const receiver = ast.receiver.visitExpression(this, ctx);\n    result = receiver[ast.name];\n    return result;\n  }\n  visitReadKeyExpr(ast: o.ReadKeyExpr, ctx: _ExecutionContext): any {\n    const receiver = ast.receiver.visitExpression(this, ctx);\n    const prop = ast.index.visitExpression(this, ctx);\n    return receiver[prop];\n  }\n  visitLiteralArrayExpr(ast: o.LiteralArrayExpr, ctx: _ExecutionContext): any {\n    return this.visitAllExpressions(ast.entries, ctx);\n  }\n  visitLiteralMapExpr(ast: o.LiteralMapExpr, ctx: _ExecutionContext): any {\n    const result: {[k: string]: any} = {};\n    ast.entries.forEach(entry => result[entry.key] = entry.value.visitExpression(this, ctx));\n    return result;\n  }\n  visitCommaExpr(ast: o.CommaExpr, context: any): any {\n    const values = this.visitAllExpressions(ast.parts, context);\n    return values[values.length - 1];\n  }\n  visitAllExpressions(expressions: o.Expression[], ctx: _ExecutionContext): any {\n    return expressions.map((expr) => expr.visitExpression(this, ctx));\n  }\n\n  visitAllStatements(statements: o.Statement[], ctx: _ExecutionContext): ReturnValue|null {\n    for (let i = 0; i < statements.length; i++) {\n      const stmt = statements[i];\n      const val = stmt.visitStatement(this, ctx);\n      if (val instanceof ReturnValue) {\n        return val;\n      }\n    }\n    return null;\n  }\n}\n\nfunction _declareFn(\n    varNames: string[], statements: o.Statement[], ctx: _ExecutionContext,\n    visitor: StatementInterpreter): Function {\n  return (...args: any[]) => _executeFunctionStatements(varNames, args, statements, ctx, visitor);\n}\n\nconst CATCH_ERROR_VAR = 'error';\nconst CATCH_STACK_VAR = 'stack';\n"]}