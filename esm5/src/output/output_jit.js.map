{"version":3,"file":"output_jit.js","sourceRoot":"","sources":["../../../../../../packages/compiler/src/output/output_jit.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {identifierName} from '../compile_metadata';\nimport {CompileReflector} from '../compile_reflector';\n\nimport {EmitterVisitorContext} from './abstract_emitter';\nimport {AbstractJsEmitterVisitor} from './abstract_js_emitter';\nimport * as o from './output_ast';\n\nfunction evalExpression(\n    sourceUrl: string, ctx: EmitterVisitorContext, vars: {[key: string]: any},\n    createSourceMap: boolean): any {\n  let fnBody = `${ctx.toSource()}\\n//# sourceURL=${sourceUrl}`;\n  const fnArgNames: string[] = [];\n  const fnArgValues: any[] = [];\n  for (const argName in vars) {\n    fnArgNames.push(argName);\n    fnArgValues.push(vars[argName]);\n  }\n  if (createSourceMap) {\n    // using `new Function(...)` generates a header, 1 line of no arguments, 2 lines otherwise\n    // E.g. ```\n    // function anonymous(a,b,c\n    // /**/) { ... }```\n    // We don't want to hard code this fact, so we auto detect it via an empty function first.\n    const emptyFn = new Function(...fnArgNames.concat('return null;')).toString();\n    const headerLines = emptyFn.slice(0, emptyFn.indexOf('return null;')).split('\\n').length - 1;\n    fnBody += `\\n${ctx.toSourceMapGenerator(sourceUrl, headerLines).toJsComment()}`;\n  }\n  return new Function(...fnArgNames.concat(fnBody))(...fnArgValues);\n}\n\nexport function jitStatements(\n    sourceUrl: string, statements: o.Statement[], reflector: CompileReflector,\n    createSourceMaps: boolean): {[key: string]: any} {\n  const converter = new JitEmitterVisitor(reflector);\n  const ctx = EmitterVisitorContext.createRoot();\n  converter.visitAllStatements(statements, ctx);\n  converter.createReturnStmt(ctx);\n  return evalExpression(sourceUrl, ctx, converter.getArgs(), createSourceMaps);\n}\n\nexport class JitEmitterVisitor extends AbstractJsEmitterVisitor {\n  private _evalArgNames: string[] = [];\n  private _evalArgValues: any[] = [];\n  private _evalExportedVars: string[] = [];\n\n  constructor(private reflector: CompileReflector) { super(); }\n\n  createReturnStmt(ctx: EmitterVisitorContext) {\n    const stmt = new o.ReturnStatement(new o.LiteralMapExpr(this._evalExportedVars.map(\n        resultVar => new o.LiteralMapEntry(resultVar, o.variable(resultVar), false))));\n    stmt.visitStatement(this, ctx);\n  }\n\n  getArgs(): {[key: string]: any} {\n    const result: {[key: string]: any} = {};\n    for (let i = 0; i < this._evalArgNames.length; i++) {\n      result[this._evalArgNames[i]] = this._evalArgValues[i];\n    }\n    return result;\n  }\n\n  visitExternalExpr(ast: o.ExternalExpr, ctx: EmitterVisitorContext): any {\n    this._emitReferenceToExternal(ast, this.reflector.resolveExternalReference(ast.value), ctx);\n    return null;\n  }\n\n  visitWrappedNodeExpr(ast: o.WrappedNodeExpr<any>, ctx: EmitterVisitorContext): any {\n    this._emitReferenceToExternal(ast, ast.node, ctx);\n    return null;\n  }\n\n  visitDeclareVarStmt(stmt: o.DeclareVarStmt, ctx: EmitterVisitorContext): any {\n    if (stmt.hasModifier(o.StmtModifier.Exported)) {\n      this._evalExportedVars.push(stmt.name);\n    }\n    return super.visitDeclareVarStmt(stmt, ctx);\n  }\n\n  visitDeclareFunctionStmt(stmt: o.DeclareFunctionStmt, ctx: EmitterVisitorContext): any {\n    if (stmt.hasModifier(o.StmtModifier.Exported)) {\n      this._evalExportedVars.push(stmt.name);\n    }\n    return super.visitDeclareFunctionStmt(stmt, ctx);\n  }\n\n  visitDeclareClassStmt(stmt: o.ClassStmt, ctx: EmitterVisitorContext): any {\n    if (stmt.hasModifier(o.StmtModifier.Exported)) {\n      this._evalExportedVars.push(stmt.name);\n    }\n    return super.visitDeclareClassStmt(stmt, ctx);\n  }\n\n  private _emitReferenceToExternal(ast: o.Expression, value: any, ctx: EmitterVisitorContext):\n      void {\n    let id = this._evalArgValues.indexOf(value);\n    if (id === -1) {\n      id = this._evalArgValues.length;\n      this._evalArgValues.push(value);\n      const name = identifierName({reference: value}) || 'val';\n      this._evalArgNames.push(`jit_${name}_${id}`);\n    }\n    ctx.print(ast, this._evalArgNames[id]);\n  }\n}\n"]}