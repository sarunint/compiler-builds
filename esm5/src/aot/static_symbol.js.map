{"version":3,"file":"static_symbol.js","sourceRoot":"","sources":["../../../../../../packages/compiler/src/aot/static_symbol.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH;;;;GAIG;AACH;IACE,sBAAmB,QAAgB,EAAS,IAAY,EAAS,OAAiB;QAA/D,aAAQ,GAAR,QAAQ,CAAQ;QAAS,SAAI,GAAJ,IAAI,CAAQ;QAAS,YAAO,GAAP,OAAO,CAAU;IAAG,CAAC;IAEtF,sCAAe,GAAf;QACE,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YACvB,MAAM,IAAI,KAAK,CACX,6DAA2D,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAG,CAAC,CAAC;SACzF;IACH,CAAC;IACH,mBAAC;AAAD,CAAC,AATD,IASC;;AAED;;;GAGG;AACH;IAAA;QACU,UAAK,GAAG,IAAI,GAAG,EAAwB,CAAC;IAalD,CAAC;IAXC,+BAAG,GAAH,UAAI,eAAuB,EAAE,IAAY,EAAE,OAAkB;QAC3D,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,IAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,MAAK,OAAO,CAAC,IAAI,CAAC,GAAG,CAAG,CAAC,CAAC,CAAC,EAAE,CAAC;QACpE,IAAM,GAAG,GAAG,OAAI,eAAe,WAAK,IAAI,GAAG,YAAc,CAAC;QAC1D,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACjC,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,GAAG,IAAI,YAAY,CAAC,eAAe,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YAC1D,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;SAC7B;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IACH,wBAAC;AAAD,CAAC,AAdD,IAcC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A token representing the a reference to a static type.\n *\n * This token is unique for a filePath and name and can be used as a hash table key.\n */\nexport class StaticSymbol {\n  constructor(public filePath: string, public name: string, public members: string[]) {}\n\n  assertNoMembers() {\n    if (this.members.length) {\n      throw new Error(\n          `Illegal state: symbol without members expected, but got ${JSON.stringify(this)}.`);\n    }\n  }\n}\n\n/**\n * A cache of static symbol used by the StaticReflector to return the same symbol for the\n * same symbol values.\n */\nexport class StaticSymbolCache {\n  private cache = new Map<string, StaticSymbol>();\n\n  get(declarationFile: string, name: string, members?: string[]): StaticSymbol {\n    members = members || [];\n    const memberSuffix = members.length ? `.${ members.join('.')}` : '';\n    const key = `\"${declarationFile}\".${name}${memberSuffix}`;\n    let result = this.cache.get(key);\n    if (!result) {\n      result = new StaticSymbol(declarationFile, name, members);\n      this.cache.set(key, result);\n    }\n    return result;\n  }\n}"]}