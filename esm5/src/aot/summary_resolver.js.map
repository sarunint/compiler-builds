{"version":3,"file":"summary_resolver.js","sourceRoot":"","sources":["../../../../../../packages/compiler/src/aot/summary_resolver.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Summary, SummaryResolver} from '../summary_resolver';\n\nimport {StaticSymbol, StaticSymbolCache} from './static_symbol';\nimport {deserializeSummaries} from './summary_serializer';\nimport {stripGeneratedFileSuffix, summaryFileName} from './util';\n\nexport interface AotSummaryResolverHost {\n  /**\n   * Loads an NgModule/Directive/Pipe summary file\n   */\n  loadSummary(filePath: string): string|null;\n\n  /**\n   * Returns whether a file is a source file or not.\n   */\n  isSourceFile(sourceFilePath: string): boolean;\n  /**\n   * Converts a file name into a representation that should be stored in a summary file.\n   * This has to include changing the suffix as well.\n   * E.g.\n   * `some_file.ts` -> `some_file.d.ts`\n   *\n   * @param referringSrcFileName the soure file that refers to fileName\n   */\n  toSummaryFileName(fileName: string, referringSrcFileName: string): string;\n\n  /**\n   * Converts a fileName that was processed by `toSummaryFileName` back into a real fileName\n   * given the fileName of the library that is referrig to it.\n   */\n  fromSummaryFileName(fileName: string, referringLibFileName: string): string;\n}\n\nexport class AotSummaryResolver implements SummaryResolver<StaticSymbol> {\n  // Note: this will only contain StaticSymbols without members!\n  private summaryCache = new Map<StaticSymbol, Summary<StaticSymbol>>();\n  private loadedFilePaths = new Map<string, boolean>();\n  // Note: this will only contain StaticSymbols without members!\n  private importAs = new Map<StaticSymbol, StaticSymbol>();\n  private knownFileNameToModuleNames = new Map<string, string>();\n\n  constructor(private host: AotSummaryResolverHost, private staticSymbolCache: StaticSymbolCache) {}\n\n  isLibraryFile(filePath: string): boolean {\n    // Note: We need to strip the .ngfactory. file path,\n    // so this method also works for generated files\n    // (for which host.isSourceFile will always return false).\n    return !this.host.isSourceFile(stripGeneratedFileSuffix(filePath));\n  }\n\n  toSummaryFileName(filePath: string, referringSrcFileName: string) {\n    return this.host.toSummaryFileName(filePath, referringSrcFileName);\n  }\n\n  fromSummaryFileName(fileName: string, referringLibFileName: string) {\n    return this.host.fromSummaryFileName(fileName, referringLibFileName);\n  }\n\n  resolveSummary(staticSymbol: StaticSymbol): Summary<StaticSymbol>|null {\n    const rootSymbol = staticSymbol.members.length ?\n        this.staticSymbolCache.get(staticSymbol.filePath, staticSymbol.name) :\n        staticSymbol;\n    let summary = this.summaryCache.get(rootSymbol);\n    if (!summary) {\n      this._loadSummaryFile(staticSymbol.filePath);\n      summary = this.summaryCache.get(staticSymbol) !;\n    }\n    return (rootSymbol === staticSymbol && summary) || null;\n  }\n\n  getSymbolsOf(filePath: string): StaticSymbol[]|null {\n    if (this._loadSummaryFile(filePath)) {\n      return Array.from(this.summaryCache.keys()).filter((symbol) => symbol.filePath === filePath);\n    }\n    return null;\n  }\n\n  getImportAs(staticSymbol: StaticSymbol): StaticSymbol {\n    staticSymbol.assertNoMembers();\n    return this.importAs.get(staticSymbol) !;\n  }\n\n  /**\n   * Converts a file path to a module name that can be used as an `import`.\n   */\n  getKnownModuleName(importedFilePath: string): string|null {\n    return this.knownFileNameToModuleNames.get(importedFilePath) || null;\n  }\n\n  addSummary(summary: Summary<StaticSymbol>) { this.summaryCache.set(summary.symbol, summary); }\n\n  private _loadSummaryFile(filePath: string): boolean {\n    let hasSummary = this.loadedFilePaths.get(filePath);\n    if (hasSummary != null) {\n      return hasSummary;\n    }\n    let json: string|null = null;\n    if (this.isLibraryFile(filePath)) {\n      const summaryFilePath = summaryFileName(filePath);\n      try {\n        json = this.host.loadSummary(summaryFilePath);\n      } catch (e) {\n        console.error(`Error loading summary file ${summaryFilePath}`);\n        throw e;\n      }\n    }\n    hasSummary = json != null;\n    this.loadedFilePaths.set(filePath, hasSummary);\n    if (json) {\n      const {moduleName, summaries, importAs} =\n          deserializeSummaries(this.staticSymbolCache, this, filePath, json);\n      summaries.forEach((summary) => this.summaryCache.set(summary.symbol, summary));\n      if (moduleName) {\n        this.knownFileNameToModuleNames.set(filePath, moduleName);\n      }\n      importAs.forEach((importAs) => { this.importAs.set(importAs.symbol, importAs.importAs); });\n    }\n    return hasSummary;\n  }\n}\n"]}