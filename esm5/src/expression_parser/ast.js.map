{"version":3,"file":"ast.js","sourceRoot":"","sources":["../../../../../../packages/compiler/src/expression_parser/ast.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SecurityContext} from '../core';\nimport {ParseSourceSpan} from '../parse_util';\n\nexport class ParserError {\n  public message: string;\n  constructor(\n      message: string, public input: string, public errLocation: string, public ctxLocation?: any) {\n    this.message = `Parser Error: ${message} ${errLocation} [${input}] in ${ctxLocation}`;\n  }\n}\n\nexport class ParseSpan {\n  constructor(public start: number, public end: number) {}\n}\n\nexport class AST {\n  constructor(public span: ParseSpan) {}\n  visit(visitor: AstVisitor, context: any = null): any { return null; }\n  toString(): string { return 'AST'; }\n}\n\n/**\n * Represents a quoted expression of the form:\n *\n * quote = prefix `:` uninterpretedExpression\n * prefix = identifier\n * uninterpretedExpression = arbitrary string\n *\n * A quoted expression is meant to be pre-processed by an AST transformer that\n * converts it into another AST that no longer contains quoted expressions.\n * It is meant to allow third-party developers to extend Angular template\n * expression language. The `uninterpretedExpression` part of the quote is\n * therefore not interpreted by the Angular's own expression parser.\n */\nexport class Quote extends AST {\n  constructor(\n      span: ParseSpan, public prefix: string, public uninterpretedExpression: string,\n      public location: any) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any { return visitor.visitQuote(this, context); }\n  toString(): string { return 'Quote'; }\n}\n\nexport class EmptyExpr extends AST {\n  visit(visitor: AstVisitor, context: any = null) {\n    // do nothing\n  }\n}\n\nexport class ImplicitReceiver extends AST {\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitImplicitReceiver(this, context);\n  }\n}\n\n/**\n * Multiple expressions separated by a semicolon.\n */\nexport class Chain extends AST {\n  constructor(span: ParseSpan, public expressions: any[]) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any { return visitor.visitChain(this, context); }\n}\n\nexport class Conditional extends AST {\n  constructor(span: ParseSpan, public condition: AST, public trueExp: AST, public falseExp: AST) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitConditional(this, context);\n  }\n}\n\nexport class PropertyRead extends AST {\n  constructor(span: ParseSpan, public receiver: AST, public name: string) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitPropertyRead(this, context);\n  }\n}\n\nexport class PropertyWrite extends AST {\n  constructor(span: ParseSpan, public receiver: AST, public name: string, public value: AST) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitPropertyWrite(this, context);\n  }\n}\n\nexport class SafePropertyRead extends AST {\n  constructor(span: ParseSpan, public receiver: AST, public name: string) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitSafePropertyRead(this, context);\n  }\n}\n\nexport class KeyedRead extends AST {\n  constructor(span: ParseSpan, public obj: AST, public key: AST) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitKeyedRead(this, context);\n  }\n}\n\nexport class KeyedWrite extends AST {\n  constructor(span: ParseSpan, public obj: AST, public key: AST, public value: AST) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitKeyedWrite(this, context);\n  }\n}\n\nexport class BindingPipe extends AST {\n  constructor(span: ParseSpan, public exp: AST, public name: string, public args: any[]) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any { return visitor.visitPipe(this, context); }\n}\n\nexport class LiteralPrimitive extends AST {\n  constructor(span: ParseSpan, public value: any) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitLiteralPrimitive(this, context);\n  }\n}\n\nexport class LiteralArray extends AST {\n  constructor(span: ParseSpan, public expressions: any[]) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitLiteralArray(this, context);\n  }\n}\n\nexport type LiteralMapKey = {\n  key: string; quoted: boolean;\n};\n\nexport class LiteralMap extends AST {\n  constructor(span: ParseSpan, public keys: LiteralMapKey[], public values: any[]) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitLiteralMap(this, context);\n  }\n}\n\nexport class Interpolation extends AST {\n  constructor(span: ParseSpan, public strings: any[], public expressions: any[]) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitInterpolation(this, context);\n  }\n}\n\nexport class Binary extends AST {\n  constructor(span: ParseSpan, public operation: string, public left: AST, public right: AST) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitBinary(this, context);\n  }\n}\n\nexport class PrefixNot extends AST {\n  constructor(span: ParseSpan, public expression: AST) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitPrefixNot(this, context);\n  }\n}\n\nexport class NonNullAssert extends AST {\n  constructor(span: ParseSpan, public expression: AST) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitNonNullAssert(this, context);\n  }\n}\n\nexport class MethodCall extends AST {\n  constructor(span: ParseSpan, public receiver: AST, public name: string, public args: any[]) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitMethodCall(this, context);\n  }\n}\n\nexport class SafeMethodCall extends AST {\n  constructor(span: ParseSpan, public receiver: AST, public name: string, public args: any[]) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitSafeMethodCall(this, context);\n  }\n}\n\nexport class FunctionCall extends AST {\n  constructor(span: ParseSpan, public target: AST|null, public args: any[]) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitFunctionCall(this, context);\n  }\n}\n\nexport class ASTWithSource extends AST {\n  constructor(\n      public ast: AST, public source: string|null, public location: string,\n      public errors: ParserError[]) {\n    super(new ParseSpan(0, source == null ? 0 : source.length));\n  }\n  visit(visitor: AstVisitor, context: any = null): any { return this.ast.visit(visitor, context); }\n  toString(): string { return `${this.source} in ${this.location}`; }\n}\n\nexport class TemplateBinding {\n  constructor(\n      public span: ParseSpan, public key: string, public keyIsVar: boolean, public name: string,\n      public expression: ASTWithSource|null) {}\n}\n\nexport interface AstVisitor {\n  visitBinary(ast: Binary, context: any): any;\n  visitChain(ast: Chain, context: any): any;\n  visitConditional(ast: Conditional, context: any): any;\n  visitFunctionCall(ast: FunctionCall, context: any): any;\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any): any;\n  visitInterpolation(ast: Interpolation, context: any): any;\n  visitKeyedRead(ast: KeyedRead, context: any): any;\n  visitKeyedWrite(ast: KeyedWrite, context: any): any;\n  visitLiteralArray(ast: LiteralArray, context: any): any;\n  visitLiteralMap(ast: LiteralMap, context: any): any;\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any): any;\n  visitMethodCall(ast: MethodCall, context: any): any;\n  visitPipe(ast: BindingPipe, context: any): any;\n  visitPrefixNot(ast: PrefixNot, context: any): any;\n  visitNonNullAssert(ast: NonNullAssert, context: any): any;\n  visitPropertyRead(ast: PropertyRead, context: any): any;\n  visitPropertyWrite(ast: PropertyWrite, context: any): any;\n  visitQuote(ast: Quote, context: any): any;\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): any;\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): any;\n  visit?(ast: AST, context?: any): any;\n}\n\nexport class NullAstVisitor implements AstVisitor {\n  visitBinary(ast: Binary, context: any): any {}\n  visitChain(ast: Chain, context: any): any {}\n  visitConditional(ast: Conditional, context: any): any {}\n  visitFunctionCall(ast: FunctionCall, context: any): any {}\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any): any {}\n  visitInterpolation(ast: Interpolation, context: any): any {}\n  visitKeyedRead(ast: KeyedRead, context: any): any {}\n  visitKeyedWrite(ast: KeyedWrite, context: any): any {}\n  visitLiteralArray(ast: LiteralArray, context: any): any {}\n  visitLiteralMap(ast: LiteralMap, context: any): any {}\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any): any {}\n  visitMethodCall(ast: MethodCall, context: any): any {}\n  visitPipe(ast: BindingPipe, context: any): any {}\n  visitPrefixNot(ast: PrefixNot, context: any): any {}\n  visitNonNullAssert(ast: NonNullAssert, context: any): any {}\n  visitPropertyRead(ast: PropertyRead, context: any): any {}\n  visitPropertyWrite(ast: PropertyWrite, context: any): any {}\n  visitQuote(ast: Quote, context: any): any {}\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): any {}\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): any {}\n}\n\nexport class RecursiveAstVisitor implements AstVisitor {\n  visitBinary(ast: Binary, context: any): any {\n    ast.left.visit(this);\n    ast.right.visit(this);\n    return null;\n  }\n  visitChain(ast: Chain, context: any): any { return this.visitAll(ast.expressions, context); }\n  visitConditional(ast: Conditional, context: any): any {\n    ast.condition.visit(this);\n    ast.trueExp.visit(this);\n    ast.falseExp.visit(this);\n    return null;\n  }\n  visitPipe(ast: BindingPipe, context: any): any {\n    ast.exp.visit(this);\n    this.visitAll(ast.args, context);\n    return null;\n  }\n  visitFunctionCall(ast: FunctionCall, context: any): any {\n    ast.target !.visit(this);\n    this.visitAll(ast.args, context);\n    return null;\n  }\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any): any { return null; }\n  visitInterpolation(ast: Interpolation, context: any): any {\n    return this.visitAll(ast.expressions, context);\n  }\n  visitKeyedRead(ast: KeyedRead, context: any): any {\n    ast.obj.visit(this);\n    ast.key.visit(this);\n    return null;\n  }\n  visitKeyedWrite(ast: KeyedWrite, context: any): any {\n    ast.obj.visit(this);\n    ast.key.visit(this);\n    ast.value.visit(this);\n    return null;\n  }\n  visitLiteralArray(ast: LiteralArray, context: any): any {\n    return this.visitAll(ast.expressions, context);\n  }\n  visitLiteralMap(ast: LiteralMap, context: any): any { return this.visitAll(ast.values, context); }\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any): any { return null; }\n  visitMethodCall(ast: MethodCall, context: any): any {\n    ast.receiver.visit(this);\n    return this.visitAll(ast.args, context);\n  }\n  visitPrefixNot(ast: PrefixNot, context: any): any {\n    ast.expression.visit(this);\n    return null;\n  }\n  visitNonNullAssert(ast: NonNullAssert, context: any): any {\n    ast.expression.visit(this);\n    return null;\n  }\n  visitPropertyRead(ast: PropertyRead, context: any): any {\n    ast.receiver.visit(this);\n    return null;\n  }\n  visitPropertyWrite(ast: PropertyWrite, context: any): any {\n    ast.receiver.visit(this);\n    ast.value.visit(this);\n    return null;\n  }\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): any {\n    ast.receiver.visit(this);\n    return null;\n  }\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): any {\n    ast.receiver.visit(this);\n    return this.visitAll(ast.args, context);\n  }\n  visitAll(asts: AST[], context: any): any {\n    asts.forEach(ast => ast.visit(this, context));\n    return null;\n  }\n  visitQuote(ast: Quote, context: any): any { return null; }\n}\n\nexport class AstTransformer implements AstVisitor {\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any): AST { return ast; }\n\n  visitInterpolation(ast: Interpolation, context: any): AST {\n    return new Interpolation(ast.span, ast.strings, this.visitAll(ast.expressions));\n  }\n\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any): AST {\n    return new LiteralPrimitive(ast.span, ast.value);\n  }\n\n  visitPropertyRead(ast: PropertyRead, context: any): AST {\n    return new PropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n  }\n\n  visitPropertyWrite(ast: PropertyWrite, context: any): AST {\n    return new PropertyWrite(ast.span, ast.receiver.visit(this), ast.name, ast.value.visit(this));\n  }\n\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): AST {\n    return new SafePropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n  }\n\n  visitMethodCall(ast: MethodCall, context: any): AST {\n    return new MethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n  }\n\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): AST {\n    return new SafeMethodCall(\n        ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n  }\n\n  visitFunctionCall(ast: FunctionCall, context: any): AST {\n    return new FunctionCall(ast.span, ast.target !.visit(this), this.visitAll(ast.args));\n  }\n\n  visitLiteralArray(ast: LiteralArray, context: any): AST {\n    return new LiteralArray(ast.span, this.visitAll(ast.expressions));\n  }\n\n  visitLiteralMap(ast: LiteralMap, context: any): AST {\n    return new LiteralMap(ast.span, ast.keys, this.visitAll(ast.values));\n  }\n\n  visitBinary(ast: Binary, context: any): AST {\n    return new Binary(ast.span, ast.operation, ast.left.visit(this), ast.right.visit(this));\n  }\n\n  visitPrefixNot(ast: PrefixNot, context: any): AST {\n    return new PrefixNot(ast.span, ast.expression.visit(this));\n  }\n\n  visitNonNullAssert(ast: NonNullAssert, context: any): AST {\n    return new NonNullAssert(ast.span, ast.expression.visit(this));\n  }\n\n  visitConditional(ast: Conditional, context: any): AST {\n    return new Conditional(\n        ast.span, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));\n  }\n\n  visitPipe(ast: BindingPipe, context: any): AST {\n    return new BindingPipe(ast.span, ast.exp.visit(this), ast.name, this.visitAll(ast.args));\n  }\n\n  visitKeyedRead(ast: KeyedRead, context: any): AST {\n    return new KeyedRead(ast.span, ast.obj.visit(this), ast.key.visit(this));\n  }\n\n  visitKeyedWrite(ast: KeyedWrite, context: any): AST {\n    return new KeyedWrite(\n        ast.span, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));\n  }\n\n  visitAll(asts: any[]): any[] {\n    const res = new Array(asts.length);\n    for (let i = 0; i < asts.length; ++i) {\n      res[i] = asts[i].visit(this);\n    }\n    return res;\n  }\n\n  visitChain(ast: Chain, context: any): AST {\n    return new Chain(ast.span, this.visitAll(ast.expressions));\n  }\n\n  visitQuote(ast: Quote, context: any): AST {\n    return new Quote(ast.span, ast.prefix, ast.uninterpretedExpression, ast.location);\n  }\n}\n\n// A transformer that only creates new nodes if the transformer makes a change or\n// a change is made a child node.\nexport class AstMemoryEfficientTransformer implements AstVisitor {\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any): AST { return ast; }\n\n  visitInterpolation(ast: Interpolation, context: any): Interpolation {\n    const expressions = this.visitAll(ast.expressions);\n    if (expressions !== ast.expressions)\n      return new Interpolation(ast.span, ast.strings, expressions);\n    return ast;\n  }\n\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any): AST { return ast; }\n\n  visitPropertyRead(ast: PropertyRead, context: any): AST {\n    const receiver = ast.receiver.visit(this);\n    if (receiver !== ast.receiver) {\n      return new PropertyRead(ast.span, receiver, ast.name);\n    }\n    return ast;\n  }\n\n  visitPropertyWrite(ast: PropertyWrite, context: any): AST {\n    const receiver = ast.receiver.visit(this);\n    const value = ast.value.visit(this);\n    if (receiver !== ast.receiver || value !== ast.value) {\n      return new PropertyWrite(ast.span, receiver, ast.name, value);\n    }\n    return ast;\n  }\n\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): AST {\n    const receiver = ast.receiver.visit(this);\n    if (receiver !== ast.receiver) {\n      return new SafePropertyRead(ast.span, receiver, ast.name);\n    }\n    return ast;\n  }\n\n  visitMethodCall(ast: MethodCall, context: any): AST {\n    const receiver = ast.receiver.visit(this);\n    if (receiver !== ast.receiver) {\n      return new MethodCall(ast.span, receiver, ast.name, this.visitAll(ast.args));\n    }\n    return ast;\n  }\n\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): AST {\n    const receiver = ast.receiver.visit(this);\n    const args = this.visitAll(ast.args);\n    if (receiver !== ast.receiver || args !== ast.args) {\n      return new SafeMethodCall(ast.span, receiver, ast.name, args);\n    }\n    return ast;\n  }\n\n  visitFunctionCall(ast: FunctionCall, context: any): AST {\n    const target = ast.target && ast.target.visit(this);\n    const args = this.visitAll(ast.args);\n    if (target !== ast.target || args !== ast.args) {\n      return new FunctionCall(ast.span, target, args);\n    }\n    return ast;\n  }\n\n  visitLiteralArray(ast: LiteralArray, context: any): AST {\n    const expressions = this.visitAll(ast.expressions);\n    if (expressions !== ast.expressions) {\n      return new LiteralArray(ast.span, expressions);\n    }\n    return ast;\n  }\n\n  visitLiteralMap(ast: LiteralMap, context: any): AST {\n    const values = this.visitAll(ast.values);\n    if (values !== ast.values) {\n      return new LiteralMap(ast.span, ast.keys, values);\n    }\n    return ast;\n  }\n\n  visitBinary(ast: Binary, context: any): AST {\n    const left = ast.left.visit(this);\n    const right = ast.right.visit(this);\n    if (left !== ast.left || right !== ast.right) {\n      return new Binary(ast.span, ast.operation, left, right);\n    }\n    return ast;\n  }\n\n  visitPrefixNot(ast: PrefixNot, context: any): AST {\n    const expression = ast.expression.visit(this);\n    if (expression !== ast.expression) {\n      return new PrefixNot(ast.span, expression);\n    }\n    return ast;\n  }\n\n  visitNonNullAssert(ast: NonNullAssert, context: any): AST {\n    const expression = ast.expression.visit(this);\n    if (expression !== ast.expression) {\n      return new NonNullAssert(ast.span, expression);\n    }\n    return ast;\n  }\n\n  visitConditional(ast: Conditional, context: any): AST {\n    const condition = ast.condition.visit(this);\n    const trueExp = ast.trueExp.visit(this);\n    const falseExp = ast.falseExp.visit(this);\n    if (condition !== ast.condition || trueExp !== ast.trueExp || falseExp !== falseExp) {\n      return new Conditional(ast.span, condition, trueExp, falseExp);\n    }\n    return ast;\n  }\n\n  visitPipe(ast: BindingPipe, context: any): AST {\n    const exp = ast.exp.visit(this);\n    const args = this.visitAll(ast.args);\n    if (exp !== ast.exp || args !== ast.args) {\n      return new BindingPipe(ast.span, exp, ast.name, args);\n    }\n    return ast;\n  }\n\n  visitKeyedRead(ast: KeyedRead, context: any): AST {\n    const obj = ast.obj.visit(this);\n    const key = ast.key.visit(this);\n    if (obj !== ast.obj || key !== ast.key) {\n      return new KeyedRead(ast.span, obj, key);\n    }\n    return ast;\n  }\n\n  visitKeyedWrite(ast: KeyedWrite, context: any): AST {\n    const obj = ast.obj.visit(this);\n    const key = ast.key.visit(this);\n    const value = ast.value.visit(this);\n    if (obj !== ast.obj || key !== ast.key || value !== ast.value) {\n      return new KeyedWrite(ast.span, obj, key, value);\n    }\n    return ast;\n  }\n\n  visitAll(asts: any[]): any[] {\n    const res = new Array(asts.length);\n    let modified = false;\n    for (let i = 0; i < asts.length; ++i) {\n      const original = asts[i];\n      const value = original.visit(this);\n      res[i] = value;\n      modified = modified || value !== original;\n    }\n    return modified ? res : asts;\n  }\n\n  visitChain(ast: Chain, context: any): AST {\n    const expressions = this.visitAll(ast.expressions);\n    if (expressions !== ast.expressions) {\n      return new Chain(ast.span, expressions);\n    }\n    return ast;\n  }\n\n  visitQuote(ast: Quote, context: any): AST { return ast; }\n}\n\nexport function visitAstChildren(ast: AST, visitor: AstVisitor, context?: any) {\n  function visit(ast: AST) {\n    visitor.visit && visitor.visit(ast, context) || ast.visit(visitor, context);\n  }\n\n  function visitAll<T extends AST>(asts: T[]) { asts.forEach(visit); }\n\n  ast.visit({\n    visitBinary(ast) {\n      visit(ast.left);\n      visit(ast.right);\n    },\n    visitChain(ast) { visitAll(ast.expressions); },\n    visitConditional(ast) {\n      visit(ast.condition);\n      visit(ast.trueExp);\n      visit(ast.falseExp);\n    },\n    visitFunctionCall(ast) {\n      if (ast.target) {\n        visit(ast.target);\n      }\n      visitAll(ast.args);\n    },\n    visitImplicitReceiver(ast) {},\n    visitInterpolation(ast) { visitAll(ast.expressions); },\n    visitKeyedRead(ast) {\n      visit(ast.obj);\n      visit(ast.key);\n    },\n    visitKeyedWrite(ast) {\n      visit(ast.obj);\n      visit(ast.key);\n      visit(ast.obj);\n    },\n    visitLiteralArray(ast) { visitAll(ast.expressions); },\n    visitLiteralMap(ast) {},\n    visitLiteralPrimitive(ast) {},\n    visitMethodCall(ast) {\n      visit(ast.receiver);\n      visitAll(ast.args);\n    },\n    visitPipe(ast) {\n      visit(ast.exp);\n      visitAll(ast.args);\n    },\n    visitPrefixNot(ast) { visit(ast.expression); },\n    visitNonNullAssert(ast) { visit(ast.expression); },\n    visitPropertyRead(ast) { visit(ast.receiver); },\n    visitPropertyWrite(ast) {\n      visit(ast.receiver);\n      visit(ast.value);\n    },\n    visitQuote(ast) {},\n    visitSafeMethodCall(ast) {\n      visit(ast.receiver);\n      visitAll(ast.args);\n    },\n    visitSafePropertyRead(ast) { visit(ast.receiver); },\n  });\n}\n\n\n// Bindings\n\nexport class ParsedProperty {\n  public readonly isLiteral: boolean;\n  public readonly isAnimation: boolean;\n\n  constructor(\n      public name: string, public expression: ASTWithSource, public type: ParsedPropertyType,\n      public sourceSpan: ParseSourceSpan) {\n    this.isLiteral = this.type === ParsedPropertyType.LITERAL_ATTR;\n    this.isAnimation = this.type === ParsedPropertyType.ANIMATION;\n  }\n}\n\nexport enum ParsedPropertyType {\n  DEFAULT,\n  LITERAL_ATTR,\n  ANIMATION\n}\n\nexport const enum ParsedEventType {\n  // DOM or Directive event\n  Regular,\n  // Animation specific event\n  Animation,\n}\n\nexport class ParsedEvent {\n  // Regular events have a target\n  // Animation events have a phase\n  constructor(\n      public name: string, public targetOrPhase: string, public type: ParsedEventType,\n      public handler: AST, public sourceSpan: ParseSourceSpan) {}\n}\n\nexport class ParsedVariable {\n  constructor(public name: string, public value: string, public sourceSpan: ParseSourceSpan) {}\n}\n\nexport const enum BindingType {\n  // A regular binding to a property (e.g. `[property]=\"expression\"`).\n  Property,\n  // A binding to an element attribute (e.g. `[attr.name]=\"expression\"`).\n  Attribute,\n  // A binding to a CSS class (e.g. `[class.name]=\"condition\"`).\n  Class,\n  // A binding to a style rule (e.g. `[style.rule]=\"expression\"`).\n  Style,\n  // A binding to an animation reference (e.g. `[animate.key]=\"expression\"`).\n  Animation,\n}\n\nexport class BoundElementProperty {\n  constructor(\n      public name: string, public type: BindingType, public securityContext: SecurityContext,\n      public value: AST, public unit: string|null, public sourceSpan: ParseSourceSpan) {}\n}\n"]}