{"version":3,"file":"message_bundle.js","sourceRoot":"","sources":["../../../../../../packages/compiler/src/i18n/message_bundle.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {ParseError} from '../parse_util';\n\nimport {extractMessages} from './extractor_merger';\nimport * as i18n from './i18n_ast';\nimport {PlaceholderMapper, Serializer} from './serializers/serializer';\n\n\n/**\n * A container for message extracted from the templates.\n */\nexport class MessageBundle {\n  private _messages: i18n.Message[] = [];\n\n  constructor(\n      private _htmlParser: HtmlParser, private _implicitTags: string[],\n      private _implicitAttrs: {[k: string]: string[]}, private _locale: string|null = null) {}\n\n  updateFromTemplate(html: string, url: string, interpolationConfig: InterpolationConfig):\n      ParseError[] {\n    const htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);\n\n    if (htmlParserResult.errors.length) {\n      return htmlParserResult.errors;\n    }\n\n    const i18nParserResult = extractMessages(\n        htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);\n\n    if (i18nParserResult.errors.length) {\n      return i18nParserResult.errors;\n    }\n\n    this._messages.push(...i18nParserResult.messages);\n    return [];\n  }\n\n  // Return the message in the internal format\n  // The public (serialized) format might be different, see the `write` method.\n  getMessages(): i18n.Message[] { return this._messages; }\n\n  write(serializer: Serializer, filterSources?: (path: string) => string): string {\n    const messages: {[id: string]: i18n.Message} = {};\n    const mapperVisitor = new MapPlaceholderNames();\n\n    // Deduplicate messages based on their ID\n    this._messages.forEach(message => {\n      const id = serializer.digest(message);\n      if (!messages.hasOwnProperty(id)) {\n        messages[id] = message;\n      } else {\n        messages[id].sources.push(...message.sources);\n      }\n    });\n\n    // Transform placeholder names using the serializer mapping\n    const msgList = Object.keys(messages).map(id => {\n      const mapper = serializer.createNameMapper(messages[id]);\n      const src = messages[id];\n      const nodes = mapper ? mapperVisitor.convert(src.nodes, mapper) : src.nodes;\n      let transformedMessage = new i18n.Message(nodes, {}, {}, src.meaning, src.description, id);\n      transformedMessage.sources = src.sources;\n      if (filterSources) {\n        transformedMessage.sources.forEach(\n            (source: i18n.MessageSpan) => source.filePath = filterSources(source.filePath));\n      }\n      return transformedMessage;\n    });\n\n    return serializer.write(msgList, this._locale);\n  }\n}\n\n// Transform an i18n AST by renaming the placeholder nodes with the given mapper\nclass MapPlaceholderNames extends i18n.CloneVisitor {\n  convert(nodes: i18n.Node[], mapper: PlaceholderMapper): i18n.Node[] {\n    return mapper ? nodes.map(n => n.visit(this, mapper)) : nodes;\n  }\n\n  visitTagPlaceholder(ph: i18n.TagPlaceholder, mapper: PlaceholderMapper): i18n.TagPlaceholder {\n    const startName = mapper.toPublicName(ph.startName) !;\n    const closeName = ph.closeName ? mapper.toPublicName(ph.closeName) ! : ph.closeName;\n    const children = ph.children.map(n => n.visit(this, mapper));\n    return new i18n.TagPlaceholder(\n        ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan);\n  }\n\n  visitPlaceholder(ph: i18n.Placeholder, mapper: PlaceholderMapper): i18n.Placeholder {\n    return new i18n.Placeholder(ph.value, mapper.toPublicName(ph.name) !, ph.sourceSpan);\n  }\n\n  visitIcuPlaceholder(ph: i18n.IcuPlaceholder, mapper: PlaceholderMapper): i18n.IcuPlaceholder {\n    return new i18n.IcuPlaceholder(ph.value, mapper.toPublicName(ph.name) !, ph.sourceSpan);\n  }\n}\n"]}