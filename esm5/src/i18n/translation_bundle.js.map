{"version":3,"file":"translation_bundle.js","sourceRoot":"","sources":["../../../../../../packages/compiler/src/i18n/translation_bundle.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MissingTranslationStrategy} from '../core';\nimport * as html from '../ml_parser/ast';\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {Console} from '../util';\n\nimport * as i18n from './i18n_ast';\nimport {I18nError} from './parse_util';\nimport {PlaceholderMapper, Serializer} from './serializers/serializer';\nimport {escapeXml} from './serializers/xml_helper';\n\n\n/**\n * A container for translated messages\n */\nexport class TranslationBundle {\n  private _i18nToHtml: I18nToHtmlVisitor;\n\n  constructor(\n      private _i18nNodesByMsgId: {[msgId: string]: i18n.Node[]} = {}, locale: string|null,\n      public digest: (m: i18n.Message) => string,\n      public mapperFactory?: (m: i18n.Message) => PlaceholderMapper,\n      missingTranslationStrategy: MissingTranslationStrategy = MissingTranslationStrategy.Warning,\n      console?: Console) {\n    this._i18nToHtml = new I18nToHtmlVisitor(\n        _i18nNodesByMsgId, locale, digest, mapperFactory !, missingTranslationStrategy, console);\n  }\n\n  // Creates a `TranslationBundle` by parsing the given `content` with the `serializer`.\n  static load(\n      content: string, url: string, serializer: Serializer,\n      missingTranslationStrategy: MissingTranslationStrategy,\n      console?: Console): TranslationBundle {\n    const {locale, i18nNodesByMsgId} = serializer.load(content, url);\n    const digestFn = (m: i18n.Message) => serializer.digest(m);\n    const mapperFactory = (m: i18n.Message) => serializer.createNameMapper(m) !;\n    return new TranslationBundle(\n        i18nNodesByMsgId, locale, digestFn, mapperFactory, missingTranslationStrategy, console);\n  }\n\n  // Returns the translation as HTML nodes from the given source message.\n  get(srcMsg: i18n.Message): html.Node[] {\n    const html = this._i18nToHtml.convert(srcMsg);\n\n    if (html.errors.length) {\n      throw new Error(html.errors.join('\\n'));\n    }\n\n    return html.nodes;\n  }\n\n  has(srcMsg: i18n.Message): boolean { return this.digest(srcMsg) in this._i18nNodesByMsgId; }\n}\n\nclass I18nToHtmlVisitor implements i18n.Visitor {\n  // TODO(issue/24571): remove '!'.\n  private _srcMsg !: i18n.Message;\n  private _contextStack: {msg: i18n.Message, mapper: (name: string) => string}[] = [];\n  private _errors: I18nError[] = [];\n  // TODO(issue/24571): remove '!'.\n  private _mapper !: (name: string) => string;\n\n  constructor(\n      private _i18nNodesByMsgId: {[msgId: string]: i18n.Node[]} = {}, private _locale: string|null,\n      private _digest: (m: i18n.Message) => string,\n      private _mapperFactory: (m: i18n.Message) => PlaceholderMapper,\n      private _missingTranslationStrategy: MissingTranslationStrategy, private _console?: Console) {\n  }\n\n  convert(srcMsg: i18n.Message): {nodes: html.Node[], errors: I18nError[]} {\n    this._contextStack.length = 0;\n    this._errors.length = 0;\n\n    // i18n to text\n    const text = this._convertToText(srcMsg);\n\n    // text to html\n    const url = srcMsg.nodes[0].sourceSpan.start.file.url;\n    const html = new HtmlParser().parse(text, url, true);\n\n    return {\n      nodes: html.rootNodes,\n      errors: [...this._errors, ...html.errors],\n    };\n  }\n\n  visitText(text: i18n.Text, context?: any): string {\n    // `convert()` uses an `HtmlParser` to return `html.Node`s\n    // we should then make sure that any special characters are escaped\n    return escapeXml(text.value);\n  }\n\n  visitContainer(container: i18n.Container, context?: any): any {\n    return container.children.map(n => n.visit(this)).join('');\n  }\n\n  visitIcu(icu: i18n.Icu, context?: any): any {\n    const cases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`);\n\n    // TODO(vicb): Once all format switch to using expression placeholders\n    // we should throw when the placeholder is not in the source message\n    const exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ?\n        this._srcMsg.placeholders[icu.expression] :\n        icu.expression;\n\n    return `{${exp}, ${icu.type}, ${cases.join(' ')}}`;\n  }\n\n  visitPlaceholder(ph: i18n.Placeholder, context?: any): string {\n    const phName = this._mapper(ph.name);\n    if (this._srcMsg.placeholders.hasOwnProperty(phName)) {\n      return this._srcMsg.placeholders[phName];\n    }\n\n    if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {\n      return this._convertToText(this._srcMsg.placeholderToMessage[phName]);\n    }\n\n    this._addError(ph, `Unknown placeholder \"${ph.name}\"`);\n    return '';\n  }\n\n  // Loaded message contains only placeholders (vs tag and icu placeholders).\n  // However when a translation can not be found, we need to serialize the source message\n  // which can contain tag placeholders\n  visitTagPlaceholder(ph: i18n.TagPlaceholder, context?: any): string {\n    const tag = `${ph.tag}`;\n    const attrs = Object.keys(ph.attrs).map(name => `${name}=\"${ph.attrs[name]}\"`).join(' ');\n    if (ph.isVoid) {\n      return `<${tag} ${attrs}/>`;\n    }\n    const children = ph.children.map((c: i18n.Node) => c.visit(this)).join('');\n    return `<${tag} ${attrs}>${children}</${tag}>`;\n  }\n\n  // Loaded message contains only placeholders (vs tag and icu placeholders).\n  // However when a translation can not be found, we need to serialize the source message\n  // which can contain tag placeholders\n  visitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): string {\n    // An ICU placeholder references the source message to be serialized\n    return this._convertToText(this._srcMsg.placeholderToMessage[ph.name]);\n  }\n\n  /**\n   * Convert a source message to a translated text string:\n   * - text nodes are replaced with their translation,\n   * - placeholders are replaced with their content,\n   * - ICU nodes are converted to ICU expressions.\n   */\n  private _convertToText(srcMsg: i18n.Message): string {\n    const id = this._digest(srcMsg);\n    const mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;\n    let nodes: i18n.Node[];\n\n    this._contextStack.push({msg: this._srcMsg, mapper: this._mapper});\n    this._srcMsg = srcMsg;\n\n    if (this._i18nNodesByMsgId.hasOwnProperty(id)) {\n      // When there is a translation use its nodes as the source\n      // And create a mapper to convert serialized placeholder names to internal names\n      nodes = this._i18nNodesByMsgId[id];\n      this._mapper = (name: string) => mapper ? mapper.toInternalName(name) ! : name;\n    } else {\n      // When no translation has been found\n      // - report an error / a warning / nothing,\n      // - use the nodes from the original message\n      // - placeholders are already internal and need no mapper\n      if (this._missingTranslationStrategy === MissingTranslationStrategy.Error) {\n        const ctx = this._locale ? ` for locale \"${this._locale}\"` : '';\n        this._addError(srcMsg.nodes[0], `Missing translation for message \"${id}\"${ctx}`);\n      } else if (\n          this._console &&\n          this._missingTranslationStrategy === MissingTranslationStrategy.Warning) {\n        const ctx = this._locale ? ` for locale \"${this._locale}\"` : '';\n        this._console.warn(`Missing translation for message \"${id}\"${ctx}`);\n      }\n      nodes = srcMsg.nodes;\n      this._mapper = (name: string) => name;\n    }\n    const text = nodes.map(node => node.visit(this)).join('');\n    const context = this._contextStack.pop() !;\n    this._srcMsg = context.msg;\n    this._mapper = context.mapper;\n    return text;\n  }\n\n  private _addError(el: i18n.Node, msg: string) {\n    this._errors.push(new I18nError(el.sourceSpan, msg));\n  }\n}\n"]}