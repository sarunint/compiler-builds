{"version":3,"file":"directive_resolver_mock.js","sourceRoot":"","sources":["../../../../../packages/compiler/testing/src/directive_resolver_mock.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AACH,OAAO,EAAmB,iBAAiB,EAAO,MAAM,mBAAmB,CAAC;AAE5E;;;GAGG;AACH,MAAM,OAAO,qBAAsB,SAAQ,iBAAiB;IAG1D,YAAY,SAA2B;QAAI,KAAK,CAAC,SAAS,CAAC,CAAC;QAFpD,gBAAW,GAAG,IAAI,GAAG,EAA6B,CAAC;IAEE,CAAC;IAK9D,OAAO,CAAC,IAAe,EAAE,eAAe,GAAG,IAAI;QAC7C,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;IAC5E,CAAC;IAED;;OAEG;IACH,YAAY,CAAC,IAAe,EAAE,QAAwB;QACpD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACvC,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CompileReflector, DirectiveResolver, core} from '@angular/compiler';\n\n/**\n * An implementation of {@link DirectiveResolver} that allows overriding\n * various properties of directives.\n */\nexport class MockDirectiveResolver extends DirectiveResolver {\n  private _directives = new Map<core.Type, core.Directive>();\n\n  constructor(reflector: CompileReflector) { super(reflector); }\n\n  resolve(type: core.Type): core.Directive;\n  resolve(type: core.Type, throwIfNotFound: true): core.Directive;\n  resolve(type: core.Type, throwIfNotFound: boolean): core.Directive|null;\n  resolve(type: core.Type, throwIfNotFound = true): core.Directive|null {\n    return this._directives.get(type) || super.resolve(type, throwIfNotFound);\n  }\n\n  /**\n   * Overrides the {@link core.Directive} for a directive.\n   */\n  setDirective(type: core.Type, metadata: core.Directive): void {\n    this._directives.set(type, metadata);\n  }\n}\n"]}