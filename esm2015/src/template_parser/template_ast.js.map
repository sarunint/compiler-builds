{"version":3,"file":"template_ast.js","sourceRoot":"","sources":["../../../../../packages/compiler/src/template_parser/template_ast.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AA0BH;;GAEG;AACH,MAAM,OAAO,OAAO;IAClB,YACW,KAAa,EAAS,cAAsB,EAAS,UAA2B;QAAhF,UAAK,GAAL,KAAK,CAAQ;QAAS,mBAAc,GAAd,cAAc,CAAQ;QAAS,eAAU,GAAV,UAAU,CAAiB;IAAG,CAAC;IAC/F,KAAK,CAAC,OAA2B,EAAE,OAAY,IAAS,OAAO,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;CACnG;AAED;;GAEG;AACH,MAAM,OAAO,YAAY;IACvB,YACW,KAAU,EAAS,cAAsB,EAAS,UAA2B;QAA7E,UAAK,GAAL,KAAK,CAAK;QAAS,mBAAc,GAAd,cAAc,CAAQ;QAAS,eAAU,GAAV,UAAU,CAAiB;IAAG,CAAC;IAC5F,KAAK,CAAC,OAA2B,EAAE,OAAY;QAC7C,OAAO,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC/C,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,OAAO;IAClB,YAAmB,IAAY,EAAS,KAAa,EAAS,UAA2B;QAAtE,SAAI,GAAJ,IAAI,CAAQ;QAAS,UAAK,GAAL,KAAK,CAAQ;QAAS,eAAU,GAAV,UAAU,CAAiB;IAAG,CAAC;IAC7F,KAAK,CAAC,OAA2B,EAAE,OAAY,IAAS,OAAO,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;CACnG;AAeD,MAAM,oBAAoB,GAAG;IAC3B,mBAAuB,mBAA+B;IACtD,mBAAuB,mBAA+B;IACtD,eAAmB,eAA2B;IAC9C,kBAAsB,kBAA8B;IACpD,eAAmB,eAA2B;CAC/C,CAAC;AAEF;;;GAGG;AACH,MAAM,OAAO,uBAAuB;IAGlC,YACW,IAAY,EAAS,IAAyB,EAC9C,eAAgC,EAAS,KAAU,EAAS,IAAiB,EAC7E,UAA2B;QAF3B,SAAI,GAAJ,IAAI,CAAQ;QAAS,SAAI,GAAJ,IAAI,CAAqB;QAC9C,oBAAe,GAAf,eAAe,CAAiB;QAAS,UAAK,GAAL,KAAK,CAAK;QAAS,SAAI,GAAJ,IAAI,CAAa;QAC7E,eAAU,GAAV,UAAU,CAAiB;QACpC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,sBAAkC,CAAC;IACjE,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAC,IAA0B;QACjD,MAAM,IAAI,GAAG,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7C,OAAO,IAAI,uBAAuB,CAC9B,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IACrF,CAAC;IAED,KAAK,CAAC,OAA2B,EAAE,OAAY;QAC7C,OAAO,OAAO,CAAC,oBAAoB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACrD,CAAC;CACF;AAED;;;GAGG;AACH,MAAM,OAAO,aAAa;IAIxB,YACW,IAAY,EAAS,MAAmB,EAAS,KAAkB,EACnE,OAAY,EAAS,UAA2B;QADhD,SAAI,GAAJ,IAAI,CAAQ;QAAS,WAAM,GAAN,MAAM,CAAa;QAAS,UAAK,GAAL,KAAK,CAAa;QACnE,YAAO,GAAP,OAAO,CAAK;QAAS,eAAU,GAAV,UAAU,CAAiB;QACzD,IAAI,CAAC,QAAQ,GAAG,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/E,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;IAClC,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,IAAY,EAAE,MAAmB,EAAE,KAAkB;QACvE,IAAI,MAAM,EAAE;YACV,OAAO,GAAG,MAAM,IAAI,IAAI,EAAE,CAAC;SAC5B;QACD,IAAI,KAAK,EAAE;YACT,OAAO,IAAI,IAAI,IAAI,KAAK,EAAE,CAAC;SAC5B;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,CAAC,eAAe,CAAC,KAAkB;QACvC,MAAM,MAAM,GAAgB,KAAK,CAAC,IAAI,oBAA4B,CAAC,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC;QAChG,MAAM,KAAK,GACP,KAAK,CAAC,IAAI,sBAA8B,CAAC,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC;QAC1E,OAAO,IAAI,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC;IACvF,CAAC;IAED,KAAK,CAAC,OAA2B,EAAE,OAAY;QAC7C,OAAO,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,YAAY;IACvB,YACW,IAAY,EAAS,KAA2B,EAAS,aAAqB,EAC9E,UAA2B;QAD3B,SAAI,GAAJ,IAAI,CAAQ;QAAS,UAAK,GAAL,KAAK,CAAsB;QAAS,kBAAa,GAAb,aAAa,CAAQ;QAC9E,eAAU,GAAV,UAAU,CAAiB;IAAG,CAAC;IAC1C,KAAK,CAAC,OAA2B,EAAE,OAAY;QAC7C,OAAO,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC/C,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,WAAW;IACtB,YAAmB,IAAY,EAAS,KAAa,EAAS,UAA2B;QAAtE,SAAI,GAAJ,IAAI,CAAQ;QAAS,UAAK,GAAL,KAAK,CAAQ;QAAS,eAAU,GAAV,UAAU,CAAiB;IAAG,CAAC;IAE7F,MAAM,CAAC,kBAAkB,CAAC,CAAiB;QACzC,OAAO,IAAI,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC;IACxD,CAAC;IAED,KAAK,CAAC,OAA2B,EAAE,OAAY;QAC7C,OAAO,OAAO,CAAC,aAAa,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC9C,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,UAAU;IACrB,YACW,IAAY,EAAS,KAAgB,EAAS,MAAiC,EAC/E,OAAwB,EAAS,UAA0B,EAC3D,UAA0B,EAAS,SAAwB,EAC3D,gBAAyB,EAAS,YAA0B,EAC5D,QAAuB,EAAS,cAA2B,EAC3D,UAA2B,EAAS,aAAmC;QALvE,SAAI,GAAJ,IAAI,CAAQ;QAAS,UAAK,GAAL,KAAK,CAAW;QAAS,WAAM,GAAN,MAAM,CAA2B;QAC/E,YAAO,GAAP,OAAO,CAAiB;QAAS,eAAU,GAAV,UAAU,CAAgB;QAC3D,eAAU,GAAV,UAAU,CAAgB;QAAS,cAAS,GAAT,SAAS,CAAe;QAC3D,qBAAgB,GAAhB,gBAAgB,CAAS;QAAS,iBAAY,GAAZ,YAAY,CAAc;QAC5D,aAAQ,GAAR,QAAQ,CAAe;QAAS,mBAAc,GAAd,cAAc,CAAa;QAC3D,eAAU,GAAV,UAAU,CAAiB;QAAS,kBAAa,GAAb,aAAa,CAAsB;IAAG,CAAC;IAEtF,KAAK,CAAC,OAA2B,EAAE,OAAY;QAC7C,OAAO,OAAO,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC7C,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,mBAAmB;IAC9B,YACW,KAAgB,EAAS,OAAwB,EAAS,UAA0B,EACpF,SAAwB,EAAS,UAA0B,EAC3D,SAAwB,EAAS,gBAAyB,EAC1D,YAA0B,EAAS,QAAuB,EAC1D,cAAsB,EAAS,UAA2B;QAJ1D,UAAK,GAAL,KAAK,CAAW;QAAS,YAAO,GAAP,OAAO,CAAiB;QAAS,eAAU,GAAV,UAAU,CAAgB;QACpF,cAAS,GAAT,SAAS,CAAe;QAAS,eAAU,GAAV,UAAU,CAAgB;QAC3D,cAAS,GAAT,SAAS,CAAe;QAAS,qBAAgB,GAAhB,gBAAgB,CAAS;QAC1D,iBAAY,GAAZ,YAAY,CAAc;QAAS,aAAQ,GAAR,QAAQ,CAAe;QAC1D,mBAAc,GAAd,cAAc,CAAQ;QAAS,eAAU,GAAV,UAAU,CAAiB;IAAG,CAAC;IAEzE,KAAK,CAAC,OAA2B,EAAE,OAAY;QAC7C,OAAO,OAAO,CAAC,qBAAqB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACtD,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,yBAAyB;IACpC,YACW,aAAqB,EAAS,YAAoB,EAAS,KAAU,EACrE,UAA2B;QAD3B,kBAAa,GAAb,aAAa,CAAQ;QAAS,iBAAY,GAAZ,YAAY,CAAQ;QAAS,UAAK,GAAL,KAAK,CAAK;QACrE,eAAU,GAAV,UAAU,CAAiB;IAAG,CAAC;IAC1C,KAAK,CAAC,OAA2B,EAAE,OAAY;QAC7C,OAAO,OAAO,CAAC,sBAAsB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACvD,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,YAAY;IACvB,YACW,SAAkC,EAAS,MAAmC,EAC9E,cAAyC,EAAS,UAA2B,EAC7E,mBAA2B,EAAS,UAA2B;QAF/D,cAAS,GAAT,SAAS,CAAyB;QAAS,WAAM,GAAN,MAAM,CAA6B;QAC9E,mBAAc,GAAd,cAAc,CAA2B;QAAS,eAAU,GAAV,UAAU,CAAiB;QAC7E,wBAAmB,GAAnB,mBAAmB,CAAQ;QAAS,eAAU,GAAV,UAAU,CAAiB;IAAG,CAAC;IAC9E,KAAK,CAAC,OAA2B,EAAE,OAAY;QAC7C,OAAO,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC/C,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,WAAW;IACtB,YACW,KAA2B,EAAS,aAAsB,EAAS,KAAc,EACjF,SAAoC,EAAS,YAA6B,EAC1E,cAAgC,EAAS,UAA2B,EAClE,QAAiB;QAHnB,UAAK,GAAL,KAAK,CAAsB;QAAS,kBAAa,GAAb,aAAa,CAAS;QAAS,UAAK,GAAL,KAAK,CAAS;QACjF,cAAS,GAAT,SAAS,CAA2B;QAAS,iBAAY,GAAZ,YAAY,CAAiB;QAC1E,mBAAc,GAAd,cAAc,CAAkB;QAAS,eAAU,GAAV,UAAU,CAAiB;QAClE,aAAQ,GAAR,QAAQ,CAAS;IAAG,CAAC;IAElC,KAAK,CAAC,OAA2B,EAAE,OAAY;QAC7C,4CAA4C;QAC5C,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAED,MAAM,CAAN,IAAY,eAMX;AAND,WAAY,eAAe;IACzB,uEAAa,CAAA;IACb,yEAAc,CAAA;IACd,+DAAS,CAAA;IACT,+DAAS,CAAA;IACT,2DAAO,CAAA;AACT,CAAC,EANW,eAAe,KAAf,eAAe,QAM1B;AAED;;GAEG;AACH,MAAM,OAAO,YAAY;IACvB,YACW,KAAa,EAAS,cAAsB,EAAS,UAA2B;QAAhF,UAAK,GAAL,KAAK,CAAQ;QAAS,mBAAc,GAAd,cAAc,CAAQ;QAAS,eAAU,GAAV,UAAU,CAAiB;IAAG,CAAC;IAC/F,KAAK,CAAC,OAA2B,EAAE,OAAY;QAC7C,OAAO,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC/C,CAAC;CACF;AA8BD;;;GAGG;AACH,MAAM,OAAO,mBAAmB;IAC9B,cAAc,CAAC,GAAiB,EAAE,OAAY,IAAS,CAAC;IACxD,qBAAqB,CAAC,GAAwB,EAAE,OAAY,IAAS,CAAC;IACtE,YAAY,CAAC,GAAe,EAAE,OAAY,IAAS,CAAC;IACpD,cAAc,CAAC,GAAiB,EAAE,OAAY,IAAS,CAAC;IACxD,aAAa,CAAC,GAAgB,EAAE,OAAY,IAAS,CAAC;IACtD,UAAU,CAAC,GAAkB,EAAE,OAAY,IAAS,CAAC;IACrD,oBAAoB,CAAC,GAA4B,EAAE,OAAY,IAAS,CAAC;IACzE,SAAS,CAAC,GAAY,EAAE,OAAY,IAAS,CAAC;IAC9C,cAAc,CAAC,GAAiB,EAAE,OAAY,IAAS,CAAC;IACxD,SAAS,CAAC,GAAY,EAAE,OAAY,IAAS,CAAC;IAC9C,cAAc,CAAC,GAAiB,EAAE,OAAY,IAAS,CAAC;IACxD,sBAAsB,CAAC,GAA8B,EAAE,OAAY,IAAS,CAAC;CAC9E;AAED;;;GAGG;AACH,MAAM,OAAO,2BAA4B,SAAQ,mBAAmB;IAClE,gBAAgB,KAAK,EAAE,CAAC,CAAC,CAAC;IAE1B,sBAAsB;IACtB,qBAAqB,CAAC,GAAwB,EAAE,OAAY;QAC1D,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;YACzC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACjB,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YACtB,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YACrB,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YACtB,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YACrB,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,YAAY,CAAC,GAAe,EAAE,OAAY;QACxC,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;YACzC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACjB,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAClB,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACnB,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YACtB,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YACtB,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YACrB,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,cAAc,CAAC,GAAiB,EAAE,OAAY;QAC5C,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;YACzC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAClB,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAC1B,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;IACL,CAAC;IAES,aAAa,CACnB,OAAY,EACZ,EAA+E;QACjF,IAAI,OAAO,GAAY,EAAE,CAAC;QAC1B,IAAI,CAAC,GAAG,IAAI,CAAC;QACb,SAAS,KAAK,CAAwB,QAAyB;YAC7D,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM;gBAAE,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;QACxF,CAAC;QACD,EAAE,CAAC,KAAK,CAAC,CAAC;QACV,OAAO,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;IACtC,CAAC;CACF;AAED;;GAEG;AACH,MAAM,UAAU,gBAAgB,CAC5B,OAA2B,EAAE,IAAmB,EAAE,UAAe,IAAI;IACvE,MAAM,MAAM,GAAU,EAAE,CAAC;IACzB,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC,GAAgB,EAAE,EAAE,CAAC,OAAO,CAAC,KAAO,CAAC,GAAG,EAAE,OAAO,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;QACpF,CAAC,GAAgB,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACtD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QACjB,MAAM,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;QAC7B,IAAI,SAAS,EAAE;YACb,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACxB;IACH,CAAC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AstPath} from '../ast_path';\nimport {CompileDirectiveSummary, CompileProviderMetadata, CompileTokenMetadata} from '../compile_metadata';\nimport {SecurityContext} from '../core';\nimport {AST, BindingType, BoundElementProperty, ParsedEvent, ParsedEventType, ParsedVariable} from '../expression_parser/ast';\nimport {LifecycleHooks} from '../lifecycle_reflector';\nimport {ParseSourceSpan} from '../parse_util';\n\n\n\n/**\n * An Abstract Syntax Tree node representing part of a parsed Angular template.\n */\nexport interface TemplateAst {\n  /**\n   * The source span from which this node was parsed.\n   */\n  sourceSpan: ParseSourceSpan;\n\n  /**\n   * Visit this node and possibly transform it.\n   */\n  visit(visitor: TemplateAstVisitor, context: any): any;\n}\n\n/**\n * A segment of text within the template.\n */\nexport class TextAst implements TemplateAst {\n  constructor(\n      public value: string, public ngContentIndex: number, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any { return visitor.visitText(this, context); }\n}\n\n/**\n * A bound expression within the text of a template.\n */\nexport class BoundTextAst implements TemplateAst {\n  constructor(\n      public value: AST, public ngContentIndex: number, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitBoundText(this, context);\n  }\n}\n\n/**\n * A plain attribute on an element.\n */\nexport class AttrAst implements TemplateAst {\n  constructor(public name: string, public value: string, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any { return visitor.visitAttr(this, context); }\n}\n\nexport const enum PropertyBindingType {\n  // A normal binding to a property (e.g. `[property]=\"expression\"`).\n  Property,\n  // A binding to an element attribute (e.g. `[attr.name]=\"expression\"`).\n  Attribute,\n  // A binding to a CSS class (e.g. `[class.name]=\"condition\"`).\n  Class,\n  // A binding to a style rule (e.g. `[style.rule]=\"expression\"`).\n  Style,\n  // A binding to an animation reference (e.g. `[animate.key]=\"expression\"`).\n  Animation,\n}\n\nconst BoundPropertyMapping = {\n  [BindingType.Animation]: PropertyBindingType.Animation,\n  [BindingType.Attribute]: PropertyBindingType.Attribute,\n  [BindingType.Class]: PropertyBindingType.Class,\n  [BindingType.Property]: PropertyBindingType.Property,\n  [BindingType.Style]: PropertyBindingType.Style,\n};\n\n/**\n * A binding for an element property (e.g. `[property]=\"expression\"`) or an animation trigger (e.g.\n * `[@trigger]=\"stateExp\"`)\n */\nexport class BoundElementPropertyAst implements TemplateAst {\n  readonly isAnimation: boolean;\n\n  constructor(\n      public name: string, public type: PropertyBindingType,\n      public securityContext: SecurityContext, public value: AST, public unit: string|null,\n      public sourceSpan: ParseSourceSpan) {\n    this.isAnimation = this.type === PropertyBindingType.Animation;\n  }\n\n  static fromBoundProperty(prop: BoundElementProperty) {\n    const type = BoundPropertyMapping[prop.type];\n    return new BoundElementPropertyAst(\n        prop.name, type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan);\n  }\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitElementProperty(this, context);\n  }\n}\n\n/**\n * A binding for an element event (e.g. `(event)=\"handler()\"`) or an animation trigger event (e.g.\n * `(@trigger.phase)=\"callback($event)\"`).\n */\nexport class BoundEventAst implements TemplateAst {\n  readonly fullName: string;\n  readonly isAnimation: boolean;\n\n  constructor(\n      public name: string, public target: string|null, public phase: string|null,\n      public handler: AST, public sourceSpan: ParseSourceSpan) {\n    this.fullName = BoundEventAst.calcFullName(this.name, this.target, this.phase);\n    this.isAnimation = !!this.phase;\n  }\n\n  static calcFullName(name: string, target: string|null, phase: string|null): string {\n    if (target) {\n      return `${target}:${name}`;\n    }\n    if (phase) {\n      return `@${name}.${phase}`;\n    }\n\n    return name;\n  }\n\n  static fromParsedEvent(event: ParsedEvent) {\n    const target: string|null = event.type === ParsedEventType.Regular ? event.targetOrPhase : null;\n    const phase: string|null =\n        event.type === ParsedEventType.Animation ? event.targetOrPhase : null;\n    return new BoundEventAst(event.name, target, phase, event.handler, event.sourceSpan);\n  }\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitEvent(this, context);\n  }\n}\n\n/**\n * A reference declaration on an element (e.g. `let someName=\"expression\"`).\n */\nexport class ReferenceAst implements TemplateAst {\n  constructor(\n      public name: string, public value: CompileTokenMetadata, public originalValue: string,\n      public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitReference(this, context);\n  }\n}\n\n/**\n * A variable declaration on a <ng-template> (e.g. `var-someName=\"someLocalName\"`).\n */\nexport class VariableAst implements TemplateAst {\n  constructor(public name: string, public value: string, public sourceSpan: ParseSourceSpan) {}\n\n  static fromParsedVariable(v: ParsedVariable) {\n    return new VariableAst(v.name, v.value, v.sourceSpan);\n  }\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitVariable(this, context);\n  }\n}\n\n/**\n * An element declaration in a template.\n */\nexport class ElementAst implements TemplateAst {\n  constructor(\n      public name: string, public attrs: AttrAst[], public inputs: BoundElementPropertyAst[],\n      public outputs: BoundEventAst[], public references: ReferenceAst[],\n      public directives: DirectiveAst[], public providers: ProviderAst[],\n      public hasViewContainer: boolean, public queryMatches: QueryMatch[],\n      public children: TemplateAst[], public ngContentIndex: number|null,\n      public sourceSpan: ParseSourceSpan, public endSourceSpan: ParseSourceSpan|null) {}\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitElement(this, context);\n  }\n}\n\n/**\n * A `<ng-template>` element included in an Angular template.\n */\nexport class EmbeddedTemplateAst implements TemplateAst {\n  constructor(\n      public attrs: AttrAst[], public outputs: BoundEventAst[], public references: ReferenceAst[],\n      public variables: VariableAst[], public directives: DirectiveAst[],\n      public providers: ProviderAst[], public hasViewContainer: boolean,\n      public queryMatches: QueryMatch[], public children: TemplateAst[],\n      public ngContentIndex: number, public sourceSpan: ParseSourceSpan) {}\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitEmbeddedTemplate(this, context);\n  }\n}\n\n/**\n * A directive property with a bound value (e.g. `*ngIf=\"condition\").\n */\nexport class BoundDirectivePropertyAst implements TemplateAst {\n  constructor(\n      public directiveName: string, public templateName: string, public value: AST,\n      public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitDirectiveProperty(this, context);\n  }\n}\n\n/**\n * A directive declared on an element.\n */\nexport class DirectiveAst implements TemplateAst {\n  constructor(\n      public directive: CompileDirectiveSummary, public inputs: BoundDirectivePropertyAst[],\n      public hostProperties: BoundElementPropertyAst[], public hostEvents: BoundEventAst[],\n      public contentQueryStartId: number, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitDirective(this, context);\n  }\n}\n\n/**\n * A provider declared on an element\n */\nexport class ProviderAst implements TemplateAst {\n  constructor(\n      public token: CompileTokenMetadata, public multiProvider: boolean, public eager: boolean,\n      public providers: CompileProviderMetadata[], public providerType: ProviderAstType,\n      public lifecycleHooks: LifecycleHooks[], public sourceSpan: ParseSourceSpan,\n      readonly isModule: boolean) {}\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    // No visit method in the visitor for now...\n    return null;\n  }\n}\n\nexport enum ProviderAstType {\n  PublicService,\n  PrivateService,\n  Component,\n  Directive,\n  Builtin\n}\n\n/**\n * Position where content is to be projected (instance of `<ng-content>` in a template).\n */\nexport class NgContentAst implements TemplateAst {\n  constructor(\n      public index: number, public ngContentIndex: number, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitNgContent(this, context);\n  }\n}\n\nexport interface QueryMatch {\n  queryId: number;\n  value: CompileTokenMetadata;\n}\n\n/**\n * A visitor for {@link TemplateAst} trees that will process each node.\n */\nexport interface TemplateAstVisitor {\n  // Returning a truthy value from `visit()` will prevent `templateVisitAll()` from the call to\n  // the typed method and result returned will become the result included in `visitAll()`s\n  // result array.\n  visit?(ast: TemplateAst, context: any): any;\n\n  visitNgContent(ast: NgContentAst, context: any): any;\n  visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any;\n  visitElement(ast: ElementAst, context: any): any;\n  visitReference(ast: ReferenceAst, context: any): any;\n  visitVariable(ast: VariableAst, context: any): any;\n  visitEvent(ast: BoundEventAst, context: any): any;\n  visitElementProperty(ast: BoundElementPropertyAst, context: any): any;\n  visitAttr(ast: AttrAst, context: any): any;\n  visitBoundText(ast: BoundTextAst, context: any): any;\n  visitText(ast: TextAst, context: any): any;\n  visitDirective(ast: DirectiveAst, context: any): any;\n  visitDirectiveProperty(ast: BoundDirectivePropertyAst, context: any): any;\n}\n\n/**\n * A visitor that accepts each node but doesn't do anything. It is intended to be used\n * as the base class for a visitor that is only interested in a subset of the node types.\n */\nexport class NullTemplateVisitor implements TemplateAstVisitor {\n  visitNgContent(ast: NgContentAst, context: any): void {}\n  visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): void {}\n  visitElement(ast: ElementAst, context: any): void {}\n  visitReference(ast: ReferenceAst, context: any): void {}\n  visitVariable(ast: VariableAst, context: any): void {}\n  visitEvent(ast: BoundEventAst, context: any): void {}\n  visitElementProperty(ast: BoundElementPropertyAst, context: any): void {}\n  visitAttr(ast: AttrAst, context: any): void {}\n  visitBoundText(ast: BoundTextAst, context: any): void {}\n  visitText(ast: TextAst, context: any): void {}\n  visitDirective(ast: DirectiveAst, context: any): void {}\n  visitDirectiveProperty(ast: BoundDirectivePropertyAst, context: any): void {}\n}\n\n/**\n * Base class that can be used to build a visitor that visits each node\n * in an template ast recursively.\n */\nexport class RecursiveTemplateAstVisitor extends NullTemplateVisitor implements TemplateAstVisitor {\n  constructor() { super(); }\n\n  // Nodes with children\n  visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any {\n    return this.visitChildren(context, visit => {\n      visit(ast.attrs);\n      visit(ast.references);\n      visit(ast.variables);\n      visit(ast.directives);\n      visit(ast.providers);\n      visit(ast.children);\n    });\n  }\n\n  visitElement(ast: ElementAst, context: any): any {\n    return this.visitChildren(context, visit => {\n      visit(ast.attrs);\n      visit(ast.inputs);\n      visit(ast.outputs);\n      visit(ast.references);\n      visit(ast.directives);\n      visit(ast.providers);\n      visit(ast.children);\n    });\n  }\n\n  visitDirective(ast: DirectiveAst, context: any): any {\n    return this.visitChildren(context, visit => {\n      visit(ast.inputs);\n      visit(ast.hostProperties);\n      visit(ast.hostEvents);\n    });\n  }\n\n  protected visitChildren<T extends TemplateAst>(\n      context: any,\n      cb: (visit: (<V extends TemplateAst>(children: V[]|undefined) => void)) => void) {\n    let results: any[][] = [];\n    let t = this;\n    function visit<T extends TemplateAst>(children: T[] | undefined) {\n      if (children && children.length) results.push(templateVisitAll(t, children, context));\n    }\n    cb(visit);\n    return [].concat.apply([], results);\n  }\n}\n\n/**\n * Visit every node in a list of {@link TemplateAst}s with the given {@link TemplateAstVisitor}.\n */\nexport function templateVisitAll(\n    visitor: TemplateAstVisitor, asts: TemplateAst[], context: any = null): any[] {\n  const result: any[] = [];\n  const visit = visitor.visit ?\n      (ast: TemplateAst) => visitor.visit !(ast, context) || ast.visit(visitor, context) :\n      (ast: TemplateAst) => ast.visit(visitor, context);\n  asts.forEach(ast => {\n    const astResult = visit(ast);\n    if (astResult) {\n      result.push(astResult);\n    }\n  });\n  return result;\n}\n\nexport type TemplateAstPath = AstPath<TemplateAst>;\n"]}