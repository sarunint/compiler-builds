{"version":3,"file":"ast.js","sourceRoot":"","sources":["../../../../../packages/compiler/src/ml_parser/ast.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AstPath} from '../ast_path';\nimport {ParseSourceSpan} from '../parse_util';\n\nexport interface Node {\n  sourceSpan: ParseSourceSpan;\n  visit(visitor: Visitor, context: any): any;\n}\n\nexport class Text implements Node {\n  constructor(public value: string, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: Visitor, context: any): any { return visitor.visitText(this, context); }\n}\n\nexport class Expansion implements Node {\n  constructor(\n      public switchValue: string, public type: string, public cases: ExpansionCase[],\n      public sourceSpan: ParseSourceSpan, public switchValueSourceSpan: ParseSourceSpan) {}\n  visit(visitor: Visitor, context: any): any { return visitor.visitExpansion(this, context); }\n}\n\nexport class ExpansionCase implements Node {\n  constructor(\n      public value: string, public expression: Node[], public sourceSpan: ParseSourceSpan,\n      public valueSourceSpan: ParseSourceSpan, public expSourceSpan: ParseSourceSpan) {}\n\n  visit(visitor: Visitor, context: any): any { return visitor.visitExpansionCase(this, context); }\n}\n\nexport class Attribute implements Node {\n  constructor(\n      public name: string, public value: string, public sourceSpan: ParseSourceSpan,\n      public valueSpan?: ParseSourceSpan) {}\n  visit(visitor: Visitor, context: any): any { return visitor.visitAttribute(this, context); }\n}\n\nexport class Element implements Node {\n  constructor(\n      public name: string, public attrs: Attribute[], public children: Node[],\n      public sourceSpan: ParseSourceSpan, public startSourceSpan: ParseSourceSpan|null = null,\n      public endSourceSpan: ParseSourceSpan|null = null) {}\n  visit(visitor: Visitor, context: any): any { return visitor.visitElement(this, context); }\n}\n\nexport class Comment implements Node {\n  constructor(public value: string|null, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: Visitor, context: any): any { return visitor.visitComment(this, context); }\n}\n\nexport interface Visitor {\n  // Returning a truthy value from `visit()` will prevent `visitAll()` from the call to the typed\n  // method and result returned will become the result included in `visitAll()`s result array.\n  visit?(node: Node, context: any): any;\n\n  visitElement(element: Element, context: any): any;\n  visitAttribute(attribute: Attribute, context: any): any;\n  visitText(text: Text, context: any): any;\n  visitComment(comment: Comment, context: any): any;\n  visitExpansion(expansion: Expansion, context: any): any;\n  visitExpansionCase(expansionCase: ExpansionCase, context: any): any;\n}\n\nexport function visitAll(visitor: Visitor, nodes: Node[], context: any = null): any[] {\n  const result: any[] = [];\n\n  const visit = visitor.visit ?\n      (ast: Node) => visitor.visit !(ast, context) || ast.visit(visitor, context) :\n      (ast: Node) => ast.visit(visitor, context);\n  nodes.forEach(ast => {\n    const astResult = visit(ast);\n    if (astResult) {\n      result.push(astResult);\n    }\n  });\n  return result;\n}\n\nexport class RecursiveVisitor implements Visitor {\n  constructor() {}\n\n  visitElement(ast: Element, context: any): any {\n    this.visitChildren(context, visit => {\n      visit(ast.attrs);\n      visit(ast.children);\n    });\n  }\n\n  visitAttribute(ast: Attribute, context: any): any {}\n  visitText(ast: Text, context: any): any {}\n  visitComment(ast: Comment, context: any): any {}\n\n  visitExpansion(ast: Expansion, context: any): any {\n    return this.visitChildren(context, visit => { visit(ast.cases); });\n  }\n\n  visitExpansionCase(ast: ExpansionCase, context: any): any {}\n\n  private visitChildren<T extends Node>(\n      context: any, cb: (visit: (<V extends Node>(children: V[]|undefined) => void)) => void) {\n    let results: any[][] = [];\n    let t = this;\n    function visit<T extends Node>(children: T[] | undefined) {\n      if (children) results.push(visitAll(t, children, context));\n    }\n    cb(visit);\n    return [].concat.apply([], results);\n  }\n}\n\nexport type HtmlAstPath = AstPath<Node>;\n\nfunction spanOf(ast: Node) {\n  const start = ast.sourceSpan.start.offset;\n  let end = ast.sourceSpan.end.offset;\n  if (ast instanceof Element) {\n    if (ast.endSourceSpan) {\n      end = ast.endSourceSpan.end.offset;\n    } else if (ast.children && ast.children.length) {\n      end = spanOf(ast.children[ast.children.length - 1]).end;\n    }\n  }\n  return {start, end};\n}\n\nexport function findNode(nodes: Node[], position: number): HtmlAstPath {\n  const path: Node[] = [];\n\n  const visitor = new class extends RecursiveVisitor {\n    visit(ast: Node, context: any): any {\n      const span = spanOf(ast);\n      if (span.start <= position && position < span.end) {\n        path.push(ast);\n      } else {\n        // Returning a value here will result in the children being skipped.\n        return true;\n      }\n    }\n  };\n\n  visitAll(visitor, nodes);\n\n  return new AstPath<Node>(path, position);\n}"]}