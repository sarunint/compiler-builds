{"version":3,"file":"r3_pipe_compiler.js","sourceRoot":"","sources":["../../../../../packages/compiler/src/render3/r3_pipe_compiler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompilePipeMetadata, identifierName} from '../compile_metadata';\nimport {CompileReflector} from '../compile_reflector';\nimport {DefinitionKind} from '../constant_pool';\nimport * as o from '../output/output_ast';\nimport {OutputContext, error} from '../util';\n\nimport {R3DependencyMetadata, compileFactoryFunction, dependenciesFromGlobalMetadata} from './r3_factory';\nimport {Identifiers as R3} from './r3_identifiers';\n\nexport interface R3PipeMetadata {\n  name: string;\n  type: o.Expression;\n  pipeName: string;\n  deps: R3DependencyMetadata[]|null;\n  pure: boolean;\n}\n\nexport interface R3PipeDef {\n  expression: o.Expression;\n  type: o.Type;\n  statements: o.Statement[];\n}\n\nexport function compilePipeFromMetadata(metadata: R3PipeMetadata) {\n  const definitionMapValues: {key: string, quoted: boolean, value: o.Expression}[] = [];\n\n  // e.g. `name: 'myPipe'`\n  definitionMapValues.push({key: 'name', value: o.literal(metadata.pipeName), quoted: false});\n\n  // e.g. `type: MyPipe`\n  definitionMapValues.push({key: 'type', value: metadata.type, quoted: false});\n\n  const templateFactory = compileFactoryFunction({\n    name: metadata.name,\n    type: metadata.type,\n    deps: metadata.deps,\n    injectFn: R3.directiveInject,\n    extraStatementFn: null,\n  });\n  definitionMapValues.push({key: 'factory', value: templateFactory.factory, quoted: false});\n\n  // e.g. `pure: true`\n  definitionMapValues.push({key: 'pure', value: o.literal(metadata.pure), quoted: false});\n\n  const expression = o.importExpr(R3.definePipe).callFn([o.literalMap(definitionMapValues)]);\n  const type = new o.ExpressionType(o.importExpr(R3.PipeDefWithMeta, [\n    new o.ExpressionType(metadata.type),\n    new o.ExpressionType(new o.LiteralExpr(metadata.pipeName)),\n  ]));\n  return {expression, type, statements: templateFactory.statements};\n}\n\n/**\n * Write a pipe definition to the output context.\n */\nexport function compilePipeFromRender2(\n    outputCtx: OutputContext, pipe: CompilePipeMetadata, reflector: CompileReflector) {\n  const definitionMapValues: {key: string, quoted: boolean, value: o.Expression}[] = [];\n\n  const name = identifierName(pipe.type);\n  if (!name) {\n    return error(`Cannot resolve the name of ${pipe.type}`);\n  }\n\n  const metadata: R3PipeMetadata = {\n    name,\n    pipeName: pipe.name,\n    type: outputCtx.importExpr(pipe.type.reference),\n    deps: dependenciesFromGlobalMetadata(pipe.type, outputCtx, reflector),\n    pure: pipe.pure,\n  };\n\n  const res = compilePipeFromMetadata(metadata);\n\n  const definitionField = outputCtx.constantPool.propertyNameOf(DefinitionKind.Pipe);\n\n  outputCtx.statements.push(new o.ClassStmt(\n      /* name */ name,\n      /* parent */ null,\n      /* fields */[new o.ClassField(\n          /* name */ definitionField,\n          /* type */ o.INFERRED_TYPE,\n          /* modifiers */[o.StmtModifier.Static],\n          /* initializer */ res.expression)],\n      /* getters */[],\n      /* constructorMethod */ new o.ClassMethod(null, [], []),\n      /* methods */[]));\n}\n"]}