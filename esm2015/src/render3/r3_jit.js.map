{"version":3,"file":"r3_jit.js","sourceRoot":"","sources":["../../../../../packages/compiler/src/render3/r3_jit.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAIH,OAAO,KAAK,CAAC,MAAM,sBAAsB,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAC,MAAM,sBAAsB,CAAC;AAEnD;;;;;GAKG;AACH,MAAM,cAAc;IAClB,YAAoB,OAA6B;QAA7B,YAAO,GAAP,OAAO,CAAsB;IAAG,CAAC;IAErD,wBAAwB,CAAC,GAAwB;QAC/C,qDAAqD;QACrD,IAAI,GAAG,CAAC,UAAU,KAAK,eAAe,EAAE;YACtC,MAAM,IAAI,KAAK,CACX,wCAAwC,GAAG,CAAC,UAAU,mDAAmD,CAAC,CAAC;SAChH;QACD,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,IAAM,CAAC,EAAE;YAC5C,MAAM,IAAI,KAAK,CAAC,+CAA+C,GAAG,CAAC,IAAK,IAAI,CAAC,CAAC;SAC/E;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAM,CAAC,CAAC;IAClC,CAAC;IAED,UAAU,CAAC,UAAe,IAAa,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;IAE7E,WAAW,CAAC,UAAe,IAAW,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;IAE5E,kBAAkB,CAAC,UAAe,IAAW,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;IAEnF,cAAc,CAAC,UAAe,IAAW,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;IAE/E,YAAY,CAAC,UAAe,IAA6B,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;IAE/F,gBAAgB,CAAC,IAAS,EAAE,UAAkB,IAAa,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;IAEjG,MAAM,CAAC,UAAe,IAA2B,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;IAEvF,kBAAkB,CAAC,IAAS,EAAE,WAAgB,IAAY,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;CACjG;AAED;;;;;;;;GAQG;AACH,MAAM,UAAU,aAAa,CACzB,GAAiB,EAAE,OAA6B,EAAE,SAAiB,EACnE,aAA4B;IAC9B,gGAAgG;IAChG,+FAA+F;IAC/F,qEAAqE;IACrE,MAAM,UAAU,GAAkB;QAChC,GAAG,aAAa;QAChB,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;KACxE,CAAC;IAEF,MAAM,GAAG,GAAG,aAAa,CAAC,SAAS,EAAE,UAAU,EAAE,IAAI,cAAc,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC,CAAC;IACrF,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC;AACrB,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector} from '../compile_reflector';\nimport {ConstantPool} from '../constant_pool';\nimport * as o from '../output/output_ast';\nimport {jitStatements} from '../output/output_jit';\n\n/**\n * Implementation of `CompileReflector` which resolves references to @angular/core\n * symbols at runtime, according to a consumer-provided mapping.\n *\n * Only supports `resolveExternalReference`, all other methods throw.\n */\nclass R3JitReflector implements CompileReflector {\n  constructor(private context: {[key: string]: any}) {}\n\n  resolveExternalReference(ref: o.ExternalReference): any {\n    // This reflector only handles @angular/core imports.\n    if (ref.moduleName !== '@angular/core') {\n      throw new Error(\n          `Cannot resolve external reference to ${ref.moduleName}, only references to @angular/core are supported.`);\n    }\n    if (!this.context.hasOwnProperty(ref.name !)) {\n      throw new Error(`No value provided for @angular/core symbol '${ref.name!}'.`);\n    }\n    return this.context[ref.name !];\n  }\n\n  parameters(typeOrFunc: any): any[][] { throw new Error('Not implemented.'); }\n\n  annotations(typeOrFunc: any): any[] { throw new Error('Not implemented.'); }\n\n  shallowAnnotations(typeOrFunc: any): any[] { throw new Error('Not implemented.'); }\n\n  tryAnnotations(typeOrFunc: any): any[] { throw new Error('Not implemented.'); }\n\n  propMetadata(typeOrFunc: any): {[key: string]: any[];} { throw new Error('Not implemented.'); }\n\n  hasLifecycleHook(type: any, lcProperty: string): boolean { throw new Error('Not implemented.'); }\n\n  guards(typeOrFunc: any): {[key: string]: any;} { throw new Error('Not implemented.'); }\n\n  componentModuleUrl(type: any, cmpMetadata: any): string { throw new Error('Not implemented.'); }\n}\n\n/**\n * JIT compiles an expression and returns the result of executing that expression.\n *\n * @param def the definition which will be compiled and executed to get the value to patch\n * @param context an object map of @angular/core symbol names to symbols which will be available in\n * the context of the compiled expression\n * @param sourceUrl a URL to use for the source map of the compiled expression\n * @param constantPool an optional `ConstantPool` which contains constants used in the expression\n */\nexport function jitExpression(\n    def: o.Expression, context: {[key: string]: any}, sourceUrl: string,\n    preStatements: o.Statement[]): any {\n  // The ConstantPool may contain Statements which declare variables used in the final expression.\n  // Therefore, its statements need to precede the actual JIT operation. The final statement is a\n  // declaration of $def which is set to the expression being compiled.\n  const statements: o.Statement[] = [\n    ...preStatements,\n    new o.DeclareVarStmt('$def', def, undefined, [o.StmtModifier.Exported]),\n  ];\n\n  const res = jitStatements(sourceUrl, statements, new R3JitReflector(context), false);\n  return res['$def'];\n}\n"]}