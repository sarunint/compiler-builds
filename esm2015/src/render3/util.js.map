{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../../packages/compiler/src/render3/util.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,YAAY,EAAC,MAAM,sBAAsB,CAAC;AAClD,OAAO,KAAK,CAAC,MAAM,sBAAsB,CAAC;AAG1C;;GAEG;AACH,MAAM,UAAU,kBAAkB,CAAC,GAAkC;IACnE,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAAC,GAAG,EAAE,KAAK,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,KAAK,EAAC,CAAC,CAAC,CAAC;IACpF,OAAO,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AAC9B,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,mBAAmB,CAAC,IAAS,EAAE,GAAkB;IAC/D,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACvB,OAAO,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,mBAAmB,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;KACzE;IACD,IAAI,IAAI,YAAY,YAAY,EAAE;QAChC,OAAO,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;KAC7B;IACD,IAAI,IAAI,IAAI,IAAI,EAAE;QAChB,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KACxB;IAED,MAAM,IAAI,KAAK,CAAC,oDAAoD,IAAI,EAAE,CAAC,CAAC;AAC9E,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,IAAkB,EAAE,SAAiB;IACtE,IAAI,MAAM,GAAkB,IAAI,CAAC;IACjC,IAAI,SAAS,GAAG,CAAC,EAAE;QACjB,MAAM,GAAG,EAAE,CAAC;QACZ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;YAClC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;SAC7B;KACF;IACD,OAAO,CAAC,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;AAC9C,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {StaticSymbol} from '../aot/static_symbol';\nimport * as o from '../output/output_ast';\nimport {OutputContext} from '../util';\n\n/**\n * Convert an object map with `Expression` values into a `LiteralMapExpr`.\n */\nexport function mapToMapExpression(map: {[key: string]: o.Expression}): o.LiteralMapExpr {\n  const result = Object.keys(map).map(key => ({key, value: map[key], quoted: false}));\n  return o.literalMap(result);\n}\n\n/**\n * Convert metadata into an `Expression` in the given `OutputContext`.\n *\n * This operation will handle arrays, references to symbols, or literal `null` or `undefined`.\n */\nexport function convertMetaToOutput(meta: any, ctx: OutputContext): o.Expression {\n  if (Array.isArray(meta)) {\n    return o.literalArr(meta.map(entry => convertMetaToOutput(entry, ctx)));\n  }\n  if (meta instanceof StaticSymbol) {\n    return ctx.importExpr(meta);\n  }\n  if (meta == null) {\n    return o.literal(meta);\n  }\n\n  throw new Error(`Internal error: Unsupported or unknown metadata: ${meta}`);\n}\n\nexport function typeWithParameters(type: o.Expression, numParams: number): o.ExpressionType {\n  let params: o.Type[]|null = null;\n  if (numParams > 0) {\n    params = [];\n    for (let i = 0; i < numParams; i++) {\n      params.push(o.DYNAMIC_TYPE);\n    }\n  }\n  return o.expressionType(type, null, params);\n}\n\nexport interface R3Reference {\n  value: o.Expression;\n  type: o.Expression;\n}\n"]}