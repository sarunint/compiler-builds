{"version":3,"file":"compiler_factory.js","sourceRoot":"","sources":["../../../../../packages/compiler/src/aot/compiler_factory.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompilerConfig} from '../config';\nimport {MissingTranslationStrategy, ViewEncapsulation} from '../core';\nimport {DirectiveNormalizer} from '../directive_normalizer';\nimport {DirectiveResolver} from '../directive_resolver';\nimport {Lexer} from '../expression_parser/lexer';\nimport {Parser} from '../expression_parser/parser';\nimport {I18NHtmlParser} from '../i18n/i18n_html_parser';\nimport {InjectableCompiler} from '../injectable_compiler';\nimport {CompileMetadataResolver} from '../metadata_resolver';\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {NgModuleCompiler} from '../ng_module_compiler';\nimport {NgModuleResolver} from '../ng_module_resolver';\nimport {TypeScriptEmitter} from '../output/ts_emitter';\nimport {PipeResolver} from '../pipe_resolver';\nimport {DomElementSchemaRegistry} from '../schema/dom_element_schema_registry';\nimport {StyleCompiler} from '../style_compiler';\nimport {TemplateParser} from '../template_parser/template_parser';\nimport {UrlResolver} from '../url_resolver';\nimport {syntaxError} from '../util';\nimport {TypeCheckCompiler} from '../view_compiler/type_check_compiler';\nimport {ViewCompiler} from '../view_compiler/view_compiler';\n\nimport {AotCompiler} from './compiler';\nimport {AotCompilerHost} from './compiler_host';\nimport {AotCompilerOptions} from './compiler_options';\nimport {StaticReflector} from './static_reflector';\nimport {StaticSymbol, StaticSymbolCache} from './static_symbol';\nimport {StaticSymbolResolver} from './static_symbol_resolver';\nimport {AotSummaryResolver} from './summary_resolver';\n\nexport function createAotUrlResolver(host: {\n  resourceNameToFileName(resourceName: string, containingFileName: string): string | null;\n}): UrlResolver {\n  return {\n    resolve: (basePath: string, url: string) => {\n      const filePath = host.resourceNameToFileName(url, basePath);\n      if (!filePath) {\n        throw syntaxError(`Couldn't resolve resource ${url} from ${basePath}`);\n      }\n      return filePath;\n    }\n  };\n}\n\n/**\n * Creates a new AotCompiler based on options and a host.\n */\nexport function createAotCompiler(\n    compilerHost: AotCompilerHost, options: AotCompilerOptions,\n    errorCollector?: (error: any, type?: any) =>\n        void): {compiler: AotCompiler, reflector: StaticReflector} {\n  let translations: string = options.translations || '';\n\n  const urlResolver = createAotUrlResolver(compilerHost);\n  const symbolCache = new StaticSymbolCache();\n  const summaryResolver = new AotSummaryResolver(compilerHost, symbolCache);\n  const symbolResolver = new StaticSymbolResolver(compilerHost, symbolCache, summaryResolver);\n  const staticReflector =\n      new StaticReflector(summaryResolver, symbolResolver, [], [], errorCollector);\n  let htmlParser: I18NHtmlParser;\n  if (!!options.enableIvy) {\n    // Ivy handles i18n at the compiler level so we must use a regular parser\n    htmlParser = new HtmlParser() as I18NHtmlParser;\n  } else {\n    htmlParser = new I18NHtmlParser(\n        new HtmlParser(), translations, options.i18nFormat, options.missingTranslation, console);\n  }\n  const config = new CompilerConfig({\n    defaultEncapsulation: ViewEncapsulation.Emulated,\n    useJit: false,\n    missingTranslation: options.missingTranslation,\n    preserveWhitespaces: options.preserveWhitespaces,\n    strictInjectionParameters: options.strictInjectionParameters,\n  });\n  const normalizer = new DirectiveNormalizer(\n      {get: (url: string) => compilerHost.loadResource(url)}, urlResolver, htmlParser, config);\n  const expressionParser = new Parser(new Lexer());\n  const elementSchemaRegistry = new DomElementSchemaRegistry();\n  const tmplParser = new TemplateParser(\n      config, staticReflector, expressionParser, elementSchemaRegistry, htmlParser, console, []);\n  const resolver = new CompileMetadataResolver(\n      config, htmlParser, new NgModuleResolver(staticReflector),\n      new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver,\n      elementSchemaRegistry, normalizer, console, symbolCache, staticReflector, errorCollector);\n  // TODO(vicb): do not pass options.i18nFormat here\n  const viewCompiler = new ViewCompiler(staticReflector);\n  const typeCheckCompiler = new TypeCheckCompiler(options, staticReflector);\n  const compiler = new AotCompiler(\n      config, options, compilerHost, staticReflector, resolver, tmplParser,\n      new StyleCompiler(urlResolver), viewCompiler, typeCheckCompiler,\n      new NgModuleCompiler(staticReflector),\n      new InjectableCompiler(staticReflector, !!options.enableIvy), new TypeScriptEmitter(),\n      summaryResolver, symbolResolver);\n  return {compiler, reflector: staticReflector};\n}\n"]}