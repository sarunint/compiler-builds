{"version":3,"file":"static_reflector.js","sourceRoot":"","sources":["../../../../../packages/compiler/src/aot/static_reflector.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileSummaryKind} from '../compile_metadata';\nimport {CompileReflector} from '../compile_reflector';\nimport {MetadataFactory, createAttribute, createComponent, createContentChild, createContentChildren, createDirective, createHost, createHostBinding, createHostListener, createInject, createInjectable, createInput, createNgModule, createOptional, createOutput, createPipe, createSelf, createSkipSelf, createViewChild, createViewChildren} from '../core';\nimport * as o from '../output/output_ast';\nimport {SummaryResolver} from '../summary_resolver';\nimport {syntaxError} from '../util';\n\nimport {FormattedMessageChain, formattedError} from './formatted_error';\nimport {StaticSymbol} from './static_symbol';\nimport {StaticSymbolResolver} from './static_symbol_resolver';\n\nconst ANGULAR_CORE = '@angular/core';\nconst ANGULAR_ROUTER = '@angular/router';\n\nconst HIDDEN_KEY = /^\\$.*\\$$/;\n\nconst IGNORE = {\n  __symbolic: 'ignore'\n};\n\nconst USE_VALUE = 'useValue';\nconst PROVIDE = 'provide';\nconst REFERENCE_SET = new Set([USE_VALUE, 'useFactory', 'data', 'id', 'loadChildren']);\nconst TYPEGUARD_POSTFIX = 'TypeGuard';\nconst USE_IF = 'UseIf';\n\nfunction shouldIgnore(value: any): boolean {\n  return value && value.__symbolic == 'ignore';\n}\n\n/**\n * A static reflector implements enough of the Reflector API that is necessary to compile\n * templates statically.\n */\nexport class StaticReflector implements CompileReflector {\n  private annotationCache = new Map<StaticSymbol, any[]>();\n  private shallowAnnotationCache = new Map<StaticSymbol, any[]>();\n  private propertyCache = new Map<StaticSymbol, {[key: string]: any[]}>();\n  private parameterCache = new Map<StaticSymbol, any[]>();\n  private methodCache = new Map<StaticSymbol, {[key: string]: boolean}>();\n  private staticCache = new Map<StaticSymbol, string[]>();\n  private conversionMap = new Map<StaticSymbol, (context: StaticSymbol, args: any[]) => any>();\n  private resolvedExternalReferences = new Map<string, StaticSymbol>();\n  // TODO(issue/24571): remove '!'.\n  private injectionToken !: StaticSymbol;\n  // TODO(issue/24571): remove '!'.\n  private opaqueToken !: StaticSymbol;\n  // TODO(issue/24571): remove '!'.\n  ROUTES !: StaticSymbol;\n  // TODO(issue/24571): remove '!'.\n  private ANALYZE_FOR_ENTRY_COMPONENTS !: StaticSymbol;\n  private annotationForParentClassWithSummaryKind =\n      new Map<CompileSummaryKind, MetadataFactory<any>[]>();\n\n  constructor(\n      private summaryResolver: SummaryResolver<StaticSymbol>,\n      private symbolResolver: StaticSymbolResolver,\n      knownMetadataClasses: {name: string, filePath: string, ctor: any}[] = [],\n      knownMetadataFunctions: {name: string, filePath: string, fn: any}[] = [],\n      private errorRecorder?: (error: any, fileName?: string) => void) {\n    this.initializeConversionMap();\n    knownMetadataClasses.forEach(\n        (kc) => this._registerDecoratorOrConstructor(\n            this.getStaticSymbol(kc.filePath, kc.name), kc.ctor));\n    knownMetadataFunctions.forEach(\n        (kf) => this._registerFunction(this.getStaticSymbol(kf.filePath, kf.name), kf.fn));\n    this.annotationForParentClassWithSummaryKind.set(\n        CompileSummaryKind.Directive, [createDirective, createComponent]);\n    this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Pipe, [createPipe]);\n    this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.NgModule, [createNgModule]);\n    this.annotationForParentClassWithSummaryKind.set(\n        CompileSummaryKind.Injectable,\n        [createInjectable, createPipe, createDirective, createComponent, createNgModule]);\n  }\n\n  componentModuleUrl(typeOrFunc: StaticSymbol): string {\n    const staticSymbol = this.findSymbolDeclaration(typeOrFunc);\n    return this.symbolResolver.getResourcePath(staticSymbol);\n  }\n\n  resolveExternalReference(ref: o.ExternalReference, containingFile?: string): StaticSymbol {\n    let key: string|undefined = undefined;\n    if (!containingFile) {\n      key = `${ref.moduleName}:${ref.name}`;\n      const declarationSymbol = this.resolvedExternalReferences.get(key);\n      if (declarationSymbol) return declarationSymbol;\n    }\n    const refSymbol =\n        this.symbolResolver.getSymbolByModule(ref.moduleName !, ref.name !, containingFile);\n    const declarationSymbol = this.findSymbolDeclaration(refSymbol);\n    if (!containingFile) {\n      this.symbolResolver.recordModuleNameForFileName(refSymbol.filePath, ref.moduleName !);\n      this.symbolResolver.recordImportAs(declarationSymbol, refSymbol);\n    }\n    if (key) {\n      this.resolvedExternalReferences.set(key, declarationSymbol);\n    }\n    return declarationSymbol;\n  }\n\n  findDeclaration(moduleUrl: string, name: string, containingFile?: string): StaticSymbol {\n    return this.findSymbolDeclaration(\n        this.symbolResolver.getSymbolByModule(moduleUrl, name, containingFile));\n  }\n\n  tryFindDeclaration(moduleUrl: string, name: string, containingFile?: string): StaticSymbol {\n    return this.symbolResolver.ignoreErrorsFor(\n        () => this.findDeclaration(moduleUrl, name, containingFile));\n  }\n\n  findSymbolDeclaration(symbol: StaticSymbol): StaticSymbol {\n    const resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);\n    if (resolvedSymbol) {\n      let resolvedMetadata = resolvedSymbol.metadata;\n      if (resolvedMetadata && resolvedMetadata.__symbolic === 'resolved') {\n        resolvedMetadata = resolvedMetadata.symbol;\n      }\n      if (resolvedMetadata instanceof StaticSymbol) {\n        return this.findSymbolDeclaration(resolvedSymbol.metadata);\n      }\n    }\n    return symbol;\n  }\n\n  public tryAnnotations(type: StaticSymbol): any[] {\n    const originalRecorder = this.errorRecorder;\n    this.errorRecorder = (error: any, fileName: string) => {};\n    try {\n      return this.annotations(type);\n    } finally {\n      this.errorRecorder = originalRecorder;\n    }\n  }\n\n  public annotations(type: StaticSymbol): any[] {\n    return this._annotations(\n        type, (type: StaticSymbol, decorators: any) => this.simplify(type, decorators),\n        this.annotationCache);\n  }\n\n  public shallowAnnotations(type: StaticSymbol): any[] {\n    return this._annotations(\n        type, (type: StaticSymbol, decorators: any) => this.simplify(type, decorators, true),\n        this.shallowAnnotationCache);\n  }\n\n  private _annotations(\n      type: StaticSymbol, simplify: (type: StaticSymbol, decorators: any) => any,\n      annotationCache: Map<StaticSymbol, any[]>): any[] {\n    let annotations = annotationCache.get(type);\n    if (!annotations) {\n      annotations = [];\n      const classMetadata = this.getTypeMetadata(type);\n      const parentType = this.findParentType(type, classMetadata);\n      if (parentType) {\n        const parentAnnotations = this.annotations(parentType);\n        annotations.push(...parentAnnotations);\n      }\n      let ownAnnotations: any[] = [];\n      if (classMetadata['decorators']) {\n        ownAnnotations = simplify(type, classMetadata['decorators']);\n        if (ownAnnotations) {\n          annotations.push(...ownAnnotations);\n        }\n      }\n      if (parentType && !this.summaryResolver.isLibraryFile(type.filePath) &&\n          this.summaryResolver.isLibraryFile(parentType.filePath)) {\n        const summary = this.summaryResolver.resolveSummary(parentType);\n        if (summary && summary.type) {\n          const requiredAnnotationTypes =\n              this.annotationForParentClassWithSummaryKind.get(summary.type.summaryKind !) !;\n          const typeHasRequiredAnnotation = requiredAnnotationTypes.some(\n              (requiredType) => ownAnnotations.some(ann => requiredType.isTypeOf(ann)));\n          if (!typeHasRequiredAnnotation) {\n            this.reportError(\n                formatMetadataError(\n                    metadataError(\n                        `Class ${type.name} in ${type.filePath} extends from a ${CompileSummaryKind[summary.type.summaryKind!]} in another compilation unit without duplicating the decorator`,\n                        /* summary */ undefined,\n                        `Please add a ${requiredAnnotationTypes.map((type) => type.ngMetadataName).join(' or ')} decorator to the class`),\n                    type),\n                type);\n          }\n        }\n      }\n      annotationCache.set(type, annotations.filter(ann => !!ann));\n    }\n    return annotations;\n  }\n\n  public propMetadata(type: StaticSymbol): {[key: string]: any[]} {\n    let propMetadata = this.propertyCache.get(type);\n    if (!propMetadata) {\n      const classMetadata = this.getTypeMetadata(type);\n      propMetadata = {};\n      const parentType = this.findParentType(type, classMetadata);\n      if (parentType) {\n        const parentPropMetadata = this.propMetadata(parentType);\n        Object.keys(parentPropMetadata).forEach((parentProp) => {\n          propMetadata ![parentProp] = parentPropMetadata[parentProp];\n        });\n      }\n\n      const members = classMetadata['members'] || {};\n      Object.keys(members).forEach((propName) => {\n        const propData = members[propName];\n        const prop = (<any[]>propData)\n                         .find(a => a['__symbolic'] == 'property' || a['__symbolic'] == 'method');\n        const decorators: any[] = [];\n        if (propMetadata ![propName]) {\n          decorators.push(...propMetadata ![propName]);\n        }\n        propMetadata ![propName] = decorators;\n        if (prop && prop['decorators']) {\n          decorators.push(...this.simplify(type, prop['decorators']));\n        }\n      });\n      this.propertyCache.set(type, propMetadata);\n    }\n    return propMetadata;\n  }\n\n  public parameters(type: StaticSymbol): any[] {\n    if (!(type instanceof StaticSymbol)) {\n      this.reportError(\n          new Error(`parameters received ${JSON.stringify(type)} which is not a StaticSymbol`),\n          type);\n      return [];\n    }\n    try {\n      let parameters = this.parameterCache.get(type);\n      if (!parameters) {\n        const classMetadata = this.getTypeMetadata(type);\n        const parentType = this.findParentType(type, classMetadata);\n        const members = classMetadata ? classMetadata['members'] : null;\n        const ctorData = members ? members['__ctor__'] : null;\n        if (ctorData) {\n          const ctor = (<any[]>ctorData).find(a => a['__symbolic'] == 'constructor');\n          const rawParameterTypes = <any[]>ctor['parameters'] || [];\n          const parameterDecorators = <any[]>this.simplify(type, ctor['parameterDecorators'] || []);\n          parameters = [];\n          rawParameterTypes.forEach((rawParamType, index) => {\n            const nestedResult: any[] = [];\n            const paramType = this.trySimplify(type, rawParamType);\n            if (paramType) nestedResult.push(paramType);\n            const decorators = parameterDecorators ? parameterDecorators[index] : null;\n            if (decorators) {\n              nestedResult.push(...decorators);\n            }\n            parameters !.push(nestedResult);\n          });\n        } else if (parentType) {\n          parameters = this.parameters(parentType);\n        }\n        if (!parameters) {\n          parameters = [];\n        }\n        this.parameterCache.set(type, parameters);\n      }\n      return parameters;\n    } catch (e) {\n      console.error(`Failed on type ${JSON.stringify(type)} with error ${e}`);\n      throw e;\n    }\n  }\n\n  private _methodNames(type: any): {[key: string]: boolean} {\n    let methodNames = this.methodCache.get(type);\n    if (!methodNames) {\n      const classMetadata = this.getTypeMetadata(type);\n      methodNames = {};\n      const parentType = this.findParentType(type, classMetadata);\n      if (parentType) {\n        const parentMethodNames = this._methodNames(parentType);\n        Object.keys(parentMethodNames).forEach((parentProp) => {\n          methodNames ![parentProp] = parentMethodNames[parentProp];\n        });\n      }\n\n      const members = classMetadata['members'] || {};\n      Object.keys(members).forEach((propName) => {\n        const propData = members[propName];\n        const isMethod = (<any[]>propData).some(a => a['__symbolic'] == 'method');\n        methodNames ![propName] = methodNames ![propName] || isMethod;\n      });\n      this.methodCache.set(type, methodNames);\n    }\n    return methodNames;\n  }\n\n  private _staticMembers(type: StaticSymbol): string[] {\n    let staticMembers = this.staticCache.get(type);\n    if (!staticMembers) {\n      const classMetadata = this.getTypeMetadata(type);\n      const staticMemberData = classMetadata['statics'] || {};\n      staticMembers = Object.keys(staticMemberData);\n      this.staticCache.set(type, staticMembers);\n    }\n    return staticMembers;\n  }\n\n\n  private findParentType(type: StaticSymbol, classMetadata: any): StaticSymbol|undefined {\n    const parentType = this.trySimplify(type, classMetadata['extends']);\n    if (parentType instanceof StaticSymbol) {\n      return parentType;\n    }\n  }\n\n  hasLifecycleHook(type: any, lcProperty: string): boolean {\n    if (!(type instanceof StaticSymbol)) {\n      this.reportError(\n          new Error(\n              `hasLifecycleHook received ${JSON.stringify(type)} which is not a StaticSymbol`),\n          type);\n    }\n    try {\n      return !!this._methodNames(type)[lcProperty];\n    } catch (e) {\n      console.error(`Failed on type ${JSON.stringify(type)} with error ${e}`);\n      throw e;\n    }\n  }\n\n  guards(type: any): {[key: string]: StaticSymbol} {\n    if (!(type instanceof StaticSymbol)) {\n      this.reportError(\n          new Error(`guards received ${JSON.stringify(type)} which is not a StaticSymbol`), type);\n      return {};\n    }\n    const staticMembers = this._staticMembers(type);\n    const result: {[key: string]: StaticSymbol} = {};\n    for (let name of staticMembers) {\n      if (name.endsWith(TYPEGUARD_POSTFIX)) {\n        let property = name.substr(0, name.length - TYPEGUARD_POSTFIX.length);\n        let value: any;\n        if (property.endsWith(USE_IF)) {\n          property = name.substr(0, property.length - USE_IF.length);\n          value = USE_IF;\n        } else {\n          value = this.getStaticSymbol(type.filePath, type.name, [name]);\n        }\n        result[property] = value;\n      }\n    }\n    return result;\n  }\n\n  private _registerDecoratorOrConstructor(type: StaticSymbol, ctor: any): void {\n    this.conversionMap.set(type, (context: StaticSymbol, args: any[]) => new ctor(...args));\n  }\n\n  private _registerFunction(type: StaticSymbol, fn: any): void {\n    this.conversionMap.set(type, (context: StaticSymbol, args: any[]) => fn.apply(undefined, args));\n  }\n\n  private initializeConversionMap(): void {\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Injectable'), createInjectable);\n    this.injectionToken = this.findDeclaration(ANGULAR_CORE, 'InjectionToken');\n    this.opaqueToken = this.findDeclaration(ANGULAR_CORE, 'OpaqueToken');\n    this.ROUTES = this.tryFindDeclaration(ANGULAR_ROUTER, 'ROUTES');\n    this.ANALYZE_FOR_ENTRY_COMPONENTS =\n        this.findDeclaration(ANGULAR_CORE, 'ANALYZE_FOR_ENTRY_COMPONENTS');\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), createHost);\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), createSelf);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), createSkipSelf);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Inject'), createInject);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Optional'), createOptional);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Attribute'), createAttribute);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'ContentChild'), createContentChild);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'ContentChildren'), createContentChildren);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'ViewChild'), createViewChild);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'ViewChildren'), createViewChildren);\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Input'), createInput);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Output'), createOutput);\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Pipe'), createPipe);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'HostBinding'), createHostBinding);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'HostListener'), createHostListener);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Directive'), createDirective);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Component'), createComponent);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'NgModule'), createNgModule);\n\n    // Note: Some metadata classes can be used directly with Provider.deps.\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), createHost);\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), createSelf);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), createSkipSelf);\n    this._registerDecoratorOrConstructor(\n        this.findDeclaration(ANGULAR_CORE, 'Optional'), createOptional);\n  }\n\n  /**\n   * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\n   * All types passed to the StaticResolver should be pseudo-types returned by this method.\n   *\n   * @param declarationFile the absolute path of the file where the symbol is declared\n   * @param name the name of the type.\n   */\n  getStaticSymbol(declarationFile: string, name: string, members?: string[]): StaticSymbol {\n    return this.symbolResolver.getStaticSymbol(declarationFile, name, members);\n  }\n\n  /**\n   * Simplify but discard any errors\n   */\n  private trySimplify(context: StaticSymbol, value: any): any {\n    const originalRecorder = this.errorRecorder;\n    this.errorRecorder = (error: any, fileName: string) => {};\n    const result = this.simplify(context, value);\n    this.errorRecorder = originalRecorder;\n    return result;\n  }\n\n  /** @internal */\n  public simplify(context: StaticSymbol, value: any, lazy: boolean = false): any {\n    const self = this;\n    let scope = BindingScope.empty;\n    const calling = new Map<StaticSymbol, boolean>();\n    const rootContext = context;\n\n    function simplifyInContext(\n        context: StaticSymbol, value: any, depth: number, references: number): any {\n      function resolveReferenceValue(staticSymbol: StaticSymbol): any {\n        const resolvedSymbol = self.symbolResolver.resolveSymbol(staticSymbol);\n        return resolvedSymbol ? resolvedSymbol.metadata : null;\n      }\n\n      function simplifyEagerly(value: any): any {\n        return simplifyInContext(context, value, depth, 0);\n      }\n\n      function simplifyLazily(value: any): any {\n        return simplifyInContext(context, value, depth, references + 1);\n      }\n\n      function simplifyNested(nestedContext: StaticSymbol, value: any): any {\n        if (nestedContext === context) {\n          // If the context hasn't changed let the exception propagate unmodified.\n          return simplifyInContext(nestedContext, value, depth + 1, references);\n        }\n        try {\n          return simplifyInContext(nestedContext, value, depth + 1, references);\n        } catch (e) {\n          if (isMetadataError(e)) {\n            // Propagate the message text up but add a message to the chain that explains how we got\n            // here.\n            // e.chain implies e.symbol\n            const summaryMsg = e.chain ? 'references \\'' + e.symbol !.name + '\\'' : errorSummary(e);\n            const summary = `'${nestedContext.name}' ${summaryMsg}`;\n            const chain = {message: summary, position: e.position, next: e.chain};\n            // TODO(chuckj): retrieve the position information indirectly from the collectors node\n            // map if the metadata is from a .ts file.\n            self.error(\n                {\n                  message: e.message,\n                  advise: e.advise,\n                  context: e.context, chain,\n                  symbol: nestedContext\n                },\n                context);\n          } else {\n            // It is probably an internal error.\n            throw e;\n          }\n        }\n      }\n\n      function simplifyCall(\n          functionSymbol: StaticSymbol, targetFunction: any, args: any[], targetExpression: any) {\n        if (targetFunction && targetFunction['__symbolic'] == 'function') {\n          if (calling.get(functionSymbol)) {\n            self.error(\n                {\n                  message: 'Recursion is not supported',\n                  summary: `called '${functionSymbol.name}' recursively`,\n                  value: targetFunction\n                },\n                functionSymbol);\n          }\n          try {\n            const value = targetFunction['value'];\n            if (value && (depth != 0 || value.__symbolic != 'error')) {\n              const parameters: string[] = targetFunction['parameters'];\n              const defaults: any[] = targetFunction.defaults;\n              args = args.map(arg => simplifyNested(context, arg))\n                         .map(arg => shouldIgnore(arg) ? undefined : arg);\n              if (defaults && defaults.length > args.length) {\n                args.push(...defaults.slice(args.length).map((value: any) => simplify(value)));\n              }\n              calling.set(functionSymbol, true);\n              const functionScope = BindingScope.build();\n              for (let i = 0; i < parameters.length; i++) {\n                functionScope.define(parameters[i], args[i]);\n              }\n              const oldScope = scope;\n              let result: any;\n              try {\n                scope = functionScope.done();\n                result = simplifyNested(functionSymbol, value);\n              } finally {\n                scope = oldScope;\n              }\n              return result;\n            }\n          } finally {\n            calling.delete(functionSymbol);\n          }\n        }\n\n        if (depth === 0) {\n          // If depth is 0 we are evaluating the top level expression that is describing element\n          // decorator. In this case, it is a decorator we don't understand, such as a custom\n          // non-angular decorator, and we should just ignore it.\n          return IGNORE;\n        }\n        let position: Position|undefined = undefined;\n        if (targetExpression && targetExpression.__symbolic == 'resolved') {\n          const line = targetExpression.line;\n          const character = targetExpression.character;\n          const fileName = targetExpression.fileName;\n          if (fileName != null && line != null && character != null) {\n            position = {fileName, line, column: character};\n          }\n        }\n        self.error(\n            {\n              message: FUNCTION_CALL_NOT_SUPPORTED,\n              context: functionSymbol,\n              value: targetFunction, position\n            },\n            context);\n      }\n\n      function simplify(expression: any): any {\n        if (isPrimitive(expression)) {\n          return expression;\n        }\n        if (expression instanceof Array) {\n          const result: any[] = [];\n          for (const item of (<any>expression)) {\n            // Check for a spread expression\n            if (item && item.__symbolic === 'spread') {\n              // We call with references as 0 because we require the actual value and cannot\n              // tolerate a reference here.\n              const spreadArray = simplifyEagerly(item.expression);\n              if (Array.isArray(spreadArray)) {\n                for (const spreadItem of spreadArray) {\n                  result.push(spreadItem);\n                }\n                continue;\n              }\n            }\n            const value = simplify(item);\n            if (shouldIgnore(value)) {\n              continue;\n            }\n            result.push(value);\n          }\n          return result;\n        }\n        if (expression instanceof StaticSymbol) {\n          // Stop simplification at builtin symbols or if we are in a reference context and\n          // the symbol doesn't have members.\n          if (expression === self.injectionToken || self.conversionMap.has(expression) ||\n              (references > 0 && !expression.members.length)) {\n            return expression;\n          } else {\n            const staticSymbol = expression;\n            const declarationValue = resolveReferenceValue(staticSymbol);\n            if (declarationValue != null) {\n              return simplifyNested(staticSymbol, declarationValue);\n            } else {\n              return staticSymbol;\n            }\n          }\n        }\n        if (expression) {\n          if (expression['__symbolic']) {\n            let staticSymbol: StaticSymbol;\n            switch (expression['__symbolic']) {\n              case 'binop':\n                let left = simplify(expression['left']);\n                if (shouldIgnore(left)) return left;\n                let right = simplify(expression['right']);\n                if (shouldIgnore(right)) return right;\n                switch (expression['operator']) {\n                  case '&&':\n                    return left && right;\n                  case '||':\n                    return left || right;\n                  case '|':\n                    return left | right;\n                  case '^':\n                    return left ^ right;\n                  case '&':\n                    return left & right;\n                  case '==':\n                    return left == right;\n                  case '!=':\n                    return left != right;\n                  case '===':\n                    return left === right;\n                  case '!==':\n                    return left !== right;\n                  case '<':\n                    return left < right;\n                  case '>':\n                    return left > right;\n                  case '<=':\n                    return left <= right;\n                  case '>=':\n                    return left >= right;\n                  case '<<':\n                    return left << right;\n                  case '>>':\n                    return left >> right;\n                  case '+':\n                    return left + right;\n                  case '-':\n                    return left - right;\n                  case '*':\n                    return left * right;\n                  case '/':\n                    return left / right;\n                  case '%':\n                    return left % right;\n                }\n                return null;\n              case 'if':\n                let condition = simplify(expression['condition']);\n                return condition ? simplify(expression['thenExpression']) :\n                                   simplify(expression['elseExpression']);\n              case 'pre':\n                let operand = simplify(expression['operand']);\n                if (shouldIgnore(operand)) return operand;\n                switch (expression['operator']) {\n                  case '+':\n                    return operand;\n                  case '-':\n                    return -operand;\n                  case '!':\n                    return !operand;\n                  case '~':\n                    return ~operand;\n                }\n                return null;\n              case 'index':\n                let indexTarget = simplifyEagerly(expression['expression']);\n                let index = simplifyEagerly(expression['index']);\n                if (indexTarget && isPrimitive(index)) return indexTarget[index];\n                return null;\n              case 'select':\n                const member = expression['member'];\n                let selectContext = context;\n                let selectTarget = simplify(expression['expression']);\n                if (selectTarget instanceof StaticSymbol) {\n                  const members = selectTarget.members.concat(member);\n                  selectContext =\n                      self.getStaticSymbol(selectTarget.filePath, selectTarget.name, members);\n                  const declarationValue = resolveReferenceValue(selectContext);\n                  if (declarationValue != null) {\n                    return simplifyNested(selectContext, declarationValue);\n                  } else {\n                    return selectContext;\n                  }\n                }\n                if (selectTarget && isPrimitive(member))\n                  return simplifyNested(selectContext, selectTarget[member]);\n                return null;\n              case 'reference':\n                // Note: This only has to deal with variable references, as symbol references have\n                // been converted into 'resolved'\n                // in the StaticSymbolResolver.\n                const name: string = expression['name'];\n                const localValue = scope.resolve(name);\n                if (localValue != BindingScope.missing) {\n                  return localValue;\n                }\n                break;\n              case 'resolved':\n                try {\n                  return simplify(expression.symbol);\n                } catch (e) {\n                  // If an error is reported evaluating the symbol record the position of the\n                  // reference in the error so it can\n                  // be reported in the error message generated from the exception.\n                  if (isMetadataError(e) && expression.fileName != null &&\n                      expression.line != null && expression.character != null) {\n                    e.position = {\n                      fileName: expression.fileName,\n                      line: expression.line,\n                      column: expression.character\n                    };\n                  }\n                  throw e;\n                }\n              case 'class':\n                return context;\n              case 'function':\n                return context;\n              case 'new':\n              case 'call':\n                // Determine if the function is a built-in conversion\n                staticSymbol = simplifyInContext(\n                    context, expression['expression'], depth + 1, /* references */ 0);\n                if (staticSymbol instanceof StaticSymbol) {\n                  if (staticSymbol === self.injectionToken || staticSymbol === self.opaqueToken) {\n                    // if somebody calls new InjectionToken, don't create an InjectionToken,\n                    // but rather return the symbol to which the InjectionToken is assigned to.\n\n                    // OpaqueToken is supported too as it is required by the language service to\n                    // support v4 and prior versions of Angular.\n                    return context;\n                  }\n                  const argExpressions: any[] = expression['arguments'] || [];\n                  let converter = self.conversionMap.get(staticSymbol);\n                  if (converter) {\n                    const args = argExpressions.map(arg => simplifyNested(context, arg))\n                                     .map(arg => shouldIgnore(arg) ? undefined : arg);\n                    return converter(context, args);\n                  } else {\n                    // Determine if the function is one we can simplify.\n                    const targetFunction = resolveReferenceValue(staticSymbol);\n                    return simplifyCall(\n                        staticSymbol, targetFunction, argExpressions, expression['expression']);\n                  }\n                }\n                return IGNORE;\n              case 'error':\n                let message = expression.message;\n                if (expression['line'] != null) {\n                  self.error(\n                      {\n                        message,\n                        context: expression.context,\n                        value: expression,\n                        position: {\n                          fileName: expression['fileName'],\n                          line: expression['line'],\n                          column: expression['character']\n                        }\n                      },\n                      context);\n                } else {\n                  self.error({message, context: expression.context}, context);\n                }\n                return IGNORE;\n              case 'ignore':\n                return expression;\n            }\n            return null;\n          }\n          return mapStringMap(expression, (value, name) => {\n            if (REFERENCE_SET.has(name)) {\n              if (name === USE_VALUE && PROVIDE in expression) {\n                // If this is a provider expression, check for special tokens that need the value\n                // during analysis.\n                const provide = simplify(expression.provide);\n                if (provide === self.ROUTES || provide == self.ANALYZE_FOR_ENTRY_COMPONENTS) {\n                  return simplify(value);\n                }\n              }\n              return simplifyLazily(value);\n            }\n            return simplify(value);\n          });\n        }\n        return IGNORE;\n      }\n\n      return simplify(value);\n    }\n\n    let result: any;\n    try {\n      result = simplifyInContext(context, value, 0, lazy ? 1 : 0);\n    } catch (e) {\n      if (this.errorRecorder) {\n        this.reportError(e, context);\n      } else {\n        throw formatMetadataError(e, context);\n      }\n    }\n    if (shouldIgnore(result)) {\n      return undefined;\n    }\n    return result;\n  }\n\n  private getTypeMetadata(type: StaticSymbol): {[key: string]: any} {\n    const resolvedSymbol = this.symbolResolver.resolveSymbol(type);\n    return resolvedSymbol && resolvedSymbol.metadata ? resolvedSymbol.metadata :\n                                                       {__symbolic: 'class'};\n  }\n\n  private reportError(error: Error, context: StaticSymbol, path?: string) {\n    if (this.errorRecorder) {\n      this.errorRecorder(\n          formatMetadataError(error, context), (context && context.filePath) || path);\n    } else {\n      throw error;\n    }\n  }\n\n  private error(\n      {message, summary, advise, position, context, value, symbol, chain}: {\n        message: string,\n        summary?: string,\n        advise?: string,\n        position?: Position,\n        context?: any,\n        value?: any,\n        symbol?: StaticSymbol,\n        chain?: MetadataMessageChain\n      },\n      reportingContext: StaticSymbol) {\n    this.reportError(\n        metadataError(message, summary, advise, position, symbol, context, chain),\n        reportingContext);\n  }\n}\n\ninterface Position {\n  fileName: string;\n  line: number;\n  column: number;\n}\n\ninterface MetadataMessageChain {\n  message: string;\n  summary?: string;\n  position?: Position;\n  context?: any;\n  symbol?: StaticSymbol;\n  next?: MetadataMessageChain;\n}\n\ntype MetadataError = Error & {\n  position?: Position;\n  advise?: string;\n  summary?: string;\n  context?: any;\n  symbol?: StaticSymbol;\n  chain?: MetadataMessageChain;\n};\n\nconst METADATA_ERROR = 'ngMetadataError';\n\nfunction metadataError(\n    message: string, summary?: string, advise?: string, position?: Position, symbol?: StaticSymbol,\n    context?: any, chain?: MetadataMessageChain): MetadataError {\n  const error = syntaxError(message) as MetadataError;\n  (error as any)[METADATA_ERROR] = true;\n  if (advise) error.advise = advise;\n  if (position) error.position = position;\n  if (summary) error.summary = summary;\n  if (context) error.context = context;\n  if (chain) error.chain = chain;\n  if (symbol) error.symbol = symbol;\n  return error;\n}\n\nfunction isMetadataError(error: Error): error is MetadataError {\n  return !!(error as any)[METADATA_ERROR];\n}\n\nconst REFERENCE_TO_NONEXPORTED_CLASS = 'Reference to non-exported class';\nconst VARIABLE_NOT_INITIALIZED = 'Variable not initialized';\nconst DESTRUCTURE_NOT_SUPPORTED = 'Destructuring not supported';\nconst COULD_NOT_RESOLVE_TYPE = 'Could not resolve type';\nconst FUNCTION_CALL_NOT_SUPPORTED = 'Function call not supported';\nconst REFERENCE_TO_LOCAL_SYMBOL = 'Reference to a local symbol';\nconst LAMBDA_NOT_SUPPORTED = 'Lambda not supported';\n\nfunction expandedMessage(message: string, context: any): string {\n  switch (message) {\n    case REFERENCE_TO_NONEXPORTED_CLASS:\n      if (context && context.className) {\n        return `References to a non-exported class are not supported in decorators but ${context.className} was referenced.`;\n      }\n      break;\n    case VARIABLE_NOT_INITIALIZED:\n      return 'Only initialized variables and constants can be referenced in decorators because the value of this variable is needed by the template compiler';\n    case DESTRUCTURE_NOT_SUPPORTED:\n      return 'Referencing an exported destructured variable or constant is not supported in decorators and this value is needed by the template compiler';\n    case COULD_NOT_RESOLVE_TYPE:\n      if (context && context.typeName) {\n        return `Could not resolve type ${context.typeName}`;\n      }\n      break;\n    case FUNCTION_CALL_NOT_SUPPORTED:\n      if (context && context.name) {\n        return `Function calls are not supported in decorators but '${context.name}' was called`;\n      }\n      return 'Function calls are not supported in decorators';\n    case REFERENCE_TO_LOCAL_SYMBOL:\n      if (context && context.name) {\n        return `Reference to a local (non-exported) symbols are not supported in decorators but '${context.name}' was referenced`;\n      }\n      break;\n    case LAMBDA_NOT_SUPPORTED:\n      return `Function expressions are not supported in decorators`;\n  }\n  return message;\n}\n\nfunction messageAdvise(message: string, context: any): string|undefined {\n  switch (message) {\n    case REFERENCE_TO_NONEXPORTED_CLASS:\n      if (context && context.className) {\n        return `Consider exporting '${context.className}'`;\n      }\n      break;\n    case DESTRUCTURE_NOT_SUPPORTED:\n      return 'Consider simplifying to avoid destructuring';\n    case REFERENCE_TO_LOCAL_SYMBOL:\n      if (context && context.name) {\n        return `Consider exporting '${context.name}'`;\n      }\n      break;\n    case LAMBDA_NOT_SUPPORTED:\n      return `Consider changing the function expression into an exported function`;\n  }\n  return undefined;\n}\n\nfunction errorSummary(error: MetadataError): string {\n  if (error.summary) {\n    return error.summary;\n  }\n  switch (error.message) {\n    case REFERENCE_TO_NONEXPORTED_CLASS:\n      if (error.context && error.context.className) {\n        return `references non-exported class ${error.context.className}`;\n      }\n      break;\n    case VARIABLE_NOT_INITIALIZED:\n      return 'is not initialized';\n    case DESTRUCTURE_NOT_SUPPORTED:\n      return 'is a destructured variable';\n    case COULD_NOT_RESOLVE_TYPE:\n      return 'could not be resolved';\n    case FUNCTION_CALL_NOT_SUPPORTED:\n      if (error.context && error.context.name) {\n        return `calls '${error.context.name}'`;\n      }\n      return `calls a function`;\n    case REFERENCE_TO_LOCAL_SYMBOL:\n      if (error.context && error.context.name) {\n        return `references local variable ${error.context.name}`;\n      }\n      return `references a local variable`;\n  }\n  return 'contains the error';\n}\n\nfunction mapStringMap(input: {[key: string]: any}, transform: (value: any, key: string) => any):\n    {[key: string]: any} {\n  if (!input) return {};\n  const result: {[key: string]: any} = {};\n  Object.keys(input).forEach((key) => {\n    const value = transform(input[key], key);\n    if (!shouldIgnore(value)) {\n      if (HIDDEN_KEY.test(key)) {\n        Object.defineProperty(result, key, {enumerable: false, configurable: true, value: value});\n      } else {\n        result[key] = value;\n      }\n    }\n  });\n  return result;\n}\n\nfunction isPrimitive(o: any): boolean {\n  return o === null || (typeof o !== 'function' && typeof o !== 'object');\n}\n\ninterface BindingScopeBuilder {\n  define(name: string, value: any): BindingScopeBuilder;\n  done(): BindingScope;\n}\n\nabstract class BindingScope {\n  abstract resolve(name: string): any;\n  public static missing = {};\n  public static empty: BindingScope = {resolve: name => BindingScope.missing};\n\n  public static build(): BindingScopeBuilder {\n    const current = new Map<string, any>();\n    return {\n      define: function(name, value) {\n        current.set(name, value);\n        return this;\n      },\n      done: function() {\n        return current.size > 0 ? new PopulatedScope(current) : BindingScope.empty;\n      }\n    };\n  }\n}\n\nclass PopulatedScope extends BindingScope {\n  constructor(private bindings: Map<string, any>) { super(); }\n\n  resolve(name: string): any {\n    return this.bindings.has(name) ? this.bindings.get(name) : BindingScope.missing;\n  }\n}\n\nfunction formatMetadataMessageChain(\n    chain: MetadataMessageChain, advise: string | undefined): FormattedMessageChain {\n  const expanded = expandedMessage(chain.message, chain.context);\n  const nesting = chain.symbol ? ` in '${chain.symbol.name}'` : '';\n  const message = `${expanded}${nesting}`;\n  const position = chain.position;\n  const next: FormattedMessageChain|undefined = chain.next ?\n      formatMetadataMessageChain(chain.next, advise) :\n      advise ? {message: advise} : undefined;\n  return {message, position, next};\n}\n\nfunction formatMetadataError(e: Error, context: StaticSymbol): Error {\n  if (isMetadataError(e)) {\n    // Produce a formatted version of the and leaving enough information in the original error\n    // to recover the formatting information to eventually produce a diagnostic error message.\n    const position = e.position;\n    const chain: MetadataMessageChain = {\n      message: `Error during template compile of '${context.name}'`,\n      position: position,\n      next: {message: e.message, next: e.chain, context: e.context, symbol: e.symbol}\n    };\n    const advise = e.advise || messageAdvise(e.message, e.context);\n    return formattedError(formatMetadataMessageChain(chain, advise));\n  }\n  return e;\n}\n"]}