{"version":3,"file":"directive_normalizer.js","sourceRoot":"","sources":["../../../../packages/compiler/src/directive_normalizer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileDirectiveMetadata, CompileStylesheetMetadata, CompileTemplateMetadata, templateSourceUrl} from './compile_metadata';\nimport {CompilerConfig, preserveWhitespacesDefault} from './config';\nimport {ViewEncapsulation} from './core';\nimport * as html from './ml_parser/ast';\nimport {HtmlParser} from './ml_parser/html_parser';\nimport {InterpolationConfig} from './ml_parser/interpolation_config';\nimport {ParseTreeResult as HtmlParseTreeResult} from './ml_parser/parser';\nimport {ResourceLoader} from './resource_loader';\nimport {extractStyleUrls, isStyleUrlResolvable} from './style_url_resolver';\nimport {PreparsedElementType, preparseElement} from './template_parser/template_preparser';\nimport {UrlResolver} from './url_resolver';\nimport {SyncAsync, isDefined, stringify, syntaxError} from './util';\n\nexport interface PrenormalizedTemplateMetadata {\n  ngModuleType: any;\n  componentType: any;\n  moduleUrl: string;\n  template: string|null;\n  templateUrl: string|null;\n  styles: string[];\n  styleUrls: string[];\n  interpolation: [string, string]|null;\n  encapsulation: ViewEncapsulation|null;\n  animations: any[];\n  preserveWhitespaces: boolean|null;\n}\n\nexport class DirectiveNormalizer {\n  private _resourceLoaderCache = new Map<string, SyncAsync<string>>();\n\n  constructor(\n      private _resourceLoader: ResourceLoader, private _urlResolver: UrlResolver,\n      private _htmlParser: HtmlParser, private _config: CompilerConfig) {}\n\n  clearCache(): void { this._resourceLoaderCache.clear(); }\n\n  clearCacheFor(normalizedDirective: CompileDirectiveMetadata): void {\n    if (!normalizedDirective.isComponent) {\n      return;\n    }\n    const template = normalizedDirective.template !;\n    this._resourceLoaderCache.delete(template.templateUrl !);\n    template.externalStylesheets.forEach(\n        (stylesheet) => { this._resourceLoaderCache.delete(stylesheet.moduleUrl !); });\n  }\n\n  private _fetch(url: string): SyncAsync<string> {\n    let result = this._resourceLoaderCache.get(url);\n    if (!result) {\n      result = this._resourceLoader.get(url);\n      this._resourceLoaderCache.set(url, result);\n    }\n    return result;\n  }\n\n  normalizeTemplate(prenormData: PrenormalizedTemplateMetadata):\n      SyncAsync<CompileTemplateMetadata> {\n    if (isDefined(prenormData.template)) {\n      if (isDefined(prenormData.templateUrl)) {\n        throw syntaxError(\n            `'${stringify(prenormData.componentType)}' component cannot define both template and templateUrl`);\n      }\n      if (typeof prenormData.template !== 'string') {\n        throw syntaxError(\n            `The template specified for component ${stringify(prenormData.componentType)} is not a string`);\n      }\n    } else if (isDefined(prenormData.templateUrl)) {\n      if (typeof prenormData.templateUrl !== 'string') {\n        throw syntaxError(\n            `The templateUrl specified for component ${stringify(prenormData.componentType)} is not a string`);\n      }\n    } else {\n      throw syntaxError(\n          `No template specified for component ${stringify(prenormData.componentType)}`);\n    }\n\n    if (isDefined(prenormData.preserveWhitespaces) &&\n        typeof prenormData.preserveWhitespaces !== 'boolean') {\n      throw syntaxError(\n          `The preserveWhitespaces option for component ${stringify(prenormData.componentType)} must be a boolean`);\n    }\n\n    return SyncAsync.then(\n        this._preParseTemplate(prenormData),\n        (preparsedTemplate) => this._normalizeTemplateMetadata(prenormData, preparsedTemplate));\n  }\n\n  private _preParseTemplate(prenomData: PrenormalizedTemplateMetadata):\n      SyncAsync<PreparsedTemplate> {\n    let template: SyncAsync<string>;\n    let templateUrl: string;\n    if (prenomData.template != null) {\n      template = prenomData.template;\n      templateUrl = prenomData.moduleUrl;\n    } else {\n      templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl !);\n      template = this._fetch(templateUrl);\n    }\n    return SyncAsync.then(\n        template, (template) => this._preparseLoadedTemplate(prenomData, template, templateUrl));\n  }\n\n  private _preparseLoadedTemplate(\n      prenormData: PrenormalizedTemplateMetadata, template: string,\n      templateAbsUrl: string): PreparsedTemplate {\n    const isInline = !!prenormData.template;\n    const interpolationConfig = InterpolationConfig.fromArray(prenormData.interpolation !);\n    const rootNodesAndErrors = this._htmlParser.parse(\n        template,\n        templateSourceUrl(\n            {reference: prenormData.ngModuleType}, {type: {reference: prenormData.componentType}},\n            {isInline, templateUrl: templateAbsUrl}),\n        true, interpolationConfig);\n    if (rootNodesAndErrors.errors.length > 0) {\n      const errorString = rootNodesAndErrors.errors.join('\\n');\n      throw syntaxError(`Template parse errors:\\n${errorString}`);\n    }\n\n    const templateMetadataStyles = this._normalizeStylesheet(new CompileStylesheetMetadata(\n        {styles: prenormData.styles, moduleUrl: prenormData.moduleUrl}));\n\n    const visitor = new TemplatePreparseVisitor();\n    html.visitAll(visitor, rootNodesAndErrors.rootNodes);\n    const templateStyles = this._normalizeStylesheet(new CompileStylesheetMetadata(\n        {styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl}));\n\n    const styles = templateMetadataStyles.styles.concat(templateStyles.styles);\n\n    const inlineStyleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);\n    const styleUrls = this\n                          ._normalizeStylesheet(new CompileStylesheetMetadata(\n                              {styleUrls: prenormData.styleUrls, moduleUrl: prenormData.moduleUrl}))\n                          .styleUrls;\n    return {\n      template,\n      templateUrl: templateAbsUrl, isInline,\n      htmlAst: rootNodesAndErrors, styles, inlineStyleUrls, styleUrls,\n      ngContentSelectors: visitor.ngContentSelectors,\n    };\n  }\n\n  private _normalizeTemplateMetadata(\n      prenormData: PrenormalizedTemplateMetadata,\n      preparsedTemplate: PreparsedTemplate): SyncAsync<CompileTemplateMetadata> {\n    return SyncAsync.then(\n        this._loadMissingExternalStylesheets(\n            preparsedTemplate.styleUrls.concat(preparsedTemplate.inlineStyleUrls)),\n        (externalStylesheets) => this._normalizeLoadedTemplateMetadata(\n            prenormData, preparsedTemplate, externalStylesheets));\n  }\n\n  private _normalizeLoadedTemplateMetadata(\n      prenormData: PrenormalizedTemplateMetadata, preparsedTemplate: PreparsedTemplate,\n      stylesheets: Map<string, CompileStylesheetMetadata>): CompileTemplateMetadata {\n    // Algorithm:\n    // - produce exactly 1 entry per original styleUrl in\n    // CompileTemplateMetadata.externalStylesheets with all styles inlined\n    // - inline all styles that are referenced by the template into CompileTemplateMetadata.styles.\n    // Reason: be able to determine how many stylesheets there are even without loading\n    // the template nor the stylesheets, so we can create a stub for TypeScript always synchronously\n    // (as resource loading may be async)\n\n    const styles = [...preparsedTemplate.styles];\n    this._inlineStyles(preparsedTemplate.inlineStyleUrls, stylesheets, styles);\n    const styleUrls = preparsedTemplate.styleUrls;\n\n    const externalStylesheets = styleUrls.map(styleUrl => {\n      const stylesheet = stylesheets.get(styleUrl) !;\n      const styles = [...stylesheet.styles];\n      this._inlineStyles(stylesheet.styleUrls, stylesheets, styles);\n      return new CompileStylesheetMetadata({moduleUrl: styleUrl, styles: styles});\n    });\n\n    let encapsulation = prenormData.encapsulation;\n    if (encapsulation == null) {\n      encapsulation = this._config.defaultEncapsulation;\n    }\n    if (encapsulation === ViewEncapsulation.Emulated && styles.length === 0 &&\n        styleUrls.length === 0) {\n      encapsulation = ViewEncapsulation.None;\n    }\n    return new CompileTemplateMetadata({\n      encapsulation,\n      template: preparsedTemplate.template,\n      templateUrl: preparsedTemplate.templateUrl,\n      htmlAst: preparsedTemplate.htmlAst, styles, styleUrls,\n      ngContentSelectors: preparsedTemplate.ngContentSelectors,\n      animations: prenormData.animations,\n      interpolation: prenormData.interpolation,\n      isInline: preparsedTemplate.isInline, externalStylesheets,\n      preserveWhitespaces: preserveWhitespacesDefault(\n          prenormData.preserveWhitespaces, this._config.preserveWhitespaces),\n    });\n  }\n\n  private _inlineStyles(\n      styleUrls: string[], stylesheets: Map<string, CompileStylesheetMetadata>,\n      targetStyles: string[]) {\n    styleUrls.forEach(styleUrl => {\n      const stylesheet = stylesheets.get(styleUrl) !;\n      stylesheet.styles.forEach(style => targetStyles.push(style));\n      this._inlineStyles(stylesheet.styleUrls, stylesheets, targetStyles);\n    });\n  }\n\n  private _loadMissingExternalStylesheets(\n      styleUrls: string[],\n      loadedStylesheets:\n          Map<string, CompileStylesheetMetadata> = new Map<string, CompileStylesheetMetadata>()):\n      SyncAsync<Map<string, CompileStylesheetMetadata>> {\n    return SyncAsync.then(\n        SyncAsync.all(styleUrls.filter((styleUrl) => !loadedStylesheets.has(styleUrl))\n                          .map(\n                              styleUrl => SyncAsync.then(\n                                  this._fetch(styleUrl),\n                                  (loadedStyle) => {\n                                    const stylesheet =\n                                        this._normalizeStylesheet(new CompileStylesheetMetadata(\n                                            {styles: [loadedStyle], moduleUrl: styleUrl}));\n                                    loadedStylesheets.set(styleUrl, stylesheet);\n                                    return this._loadMissingExternalStylesheets(\n                                        stylesheet.styleUrls, loadedStylesheets);\n                                  }))),\n        (_) => loadedStylesheets);\n  }\n\n  private _normalizeStylesheet(stylesheet: CompileStylesheetMetadata): CompileStylesheetMetadata {\n    const moduleUrl = stylesheet.moduleUrl !;\n    const allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable)\n                             .map(url => this._urlResolver.resolve(moduleUrl, url));\n\n    const allStyles = stylesheet.styles.map(style => {\n      const styleWithImports = extractStyleUrls(this._urlResolver, moduleUrl, style);\n      allStyleUrls.push(...styleWithImports.styleUrls);\n      return styleWithImports.style;\n    });\n\n    return new CompileStylesheetMetadata(\n        {styles: allStyles, styleUrls: allStyleUrls, moduleUrl: moduleUrl});\n  }\n}\n\ninterface PreparsedTemplate {\n  template: string;\n  templateUrl: string;\n  isInline: boolean;\n  htmlAst: HtmlParseTreeResult;\n  styles: string[];\n  inlineStyleUrls: string[];\n  styleUrls: string[];\n  ngContentSelectors: string[];\n}\n\nclass TemplatePreparseVisitor implements html.Visitor {\n  ngContentSelectors: string[] = [];\n  styles: string[] = [];\n  styleUrls: string[] = [];\n  ngNonBindableStackCount: number = 0;\n\n  visitElement(ast: html.Element, context: any): any {\n    const preparsedElement = preparseElement(ast);\n    switch (preparsedElement.type) {\n      case PreparsedElementType.NG_CONTENT:\n        if (this.ngNonBindableStackCount === 0) {\n          this.ngContentSelectors.push(preparsedElement.selectAttr);\n        }\n        break;\n      case PreparsedElementType.STYLE:\n        let textContent = '';\n        ast.children.forEach(child => {\n          if (child instanceof html.Text) {\n            textContent += child.value;\n          }\n        });\n        this.styles.push(textContent);\n        break;\n      case PreparsedElementType.STYLESHEET:\n        this.styleUrls.push(preparsedElement.hrefAttr);\n        break;\n      default:\n        break;\n    }\n    if (preparsedElement.nonBindable) {\n      this.ngNonBindableStackCount++;\n    }\n    html.visitAll(this, ast.children);\n    if (preparsedElement.nonBindable) {\n      this.ngNonBindableStackCount--;\n    }\n    return null;\n  }\n\n  visitExpansion(ast: html.Expansion, context: any): any { html.visitAll(this, ast.cases); }\n\n  visitExpansionCase(ast: html.ExpansionCase, context: any): any {\n    html.visitAll(this, ast.expression);\n  }\n\n  visitComment(ast: html.Comment, context: any): any { return null; }\n  visitAttribute(ast: html.Attribute, context: any): any { return null; }\n  visitText(ast: html.Text, context: any): any { return null; }\n}\n"]}