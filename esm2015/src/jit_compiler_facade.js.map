{"version":3,"file":"jit_compiler_facade.js","sourceRoot":"","sources":["../../../../packages/compiler/src/jit_compiler_facade.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CompilerFacade, CoreEnvironment, ExportedCompilerFacade, R3ComponentMetadataFacade, R3DependencyMetadataFacade, R3DirectiveMetadataFacade, R3InjectableMetadataFacade, R3InjectorMetadataFacade, R3NgModuleMetadataFacade, R3PipeMetadataFacade, R3QueryMetadataFacade, StringMap, StringMapWithRename} from './compiler_facade_interface';\nimport {ConstantPool} from './constant_pool';\nimport {HostBinding, HostListener, Input, Output, Type} from './core';\nimport {compileInjectable} from './injectable_compiler_2';\nimport {Expression, LiteralExpr, WrappedNodeExpr} from './output/output_ast';\nimport {R3DependencyMetadata, R3ResolvedDependencyType} from './render3/r3_factory';\nimport {jitExpression} from './render3/r3_jit';\nimport {R3InjectorMetadata, R3NgModuleMetadata, compileInjector, compileNgModule} from './render3/r3_module_compiler';\nimport {compilePipeFromMetadata} from './render3/r3_pipe_compiler';\nimport {R3Reference} from './render3/util';\nimport {R3DirectiveMetadata, R3QueryMetadata} from './render3/view/api';\nimport {compileComponentFromMetadata, compileDirectiveFromMetadata, parseHostBindings} from './render3/view/compiler';\nimport {makeBindingParser, parseTemplate} from './render3/view/template';\n\nexport class CompilerFacadeImpl implements CompilerFacade {\n  R3ResolvedDependencyType = R3ResolvedDependencyType as any;\n\n  compilePipe(angularCoreEnv: CoreEnvironment, sourceMapUrl: string, facade: R3PipeMetadataFacade):\n      any {\n    const res = compilePipeFromMetadata({\n      name: facade.name,\n      type: new WrappedNodeExpr(facade.type),\n      deps: convertR3DependencyMetadataArray(facade.deps),\n      pipeName: facade.pipeName,\n      pure: facade.pure,\n    });\n    return jitExpression(res.expression, angularCoreEnv, sourceMapUrl, res.statements);\n  }\n\n  compileInjectable(\n      angularCoreEnv: CoreEnvironment, sourceMapUrl: string,\n      facade: R3InjectableMetadataFacade): any {\n    const {expression, statements} = compileInjectable({\n      name: facade.name,\n      type: new WrappedNodeExpr(facade.type),\n      providedIn: computeProvidedIn(facade.providedIn),\n      useClass: wrapExpression(facade, USE_CLASS),\n      useFactory: wrapExpression(facade, USE_FACTORY),\n      useValue: wrapExpression(facade, USE_VALUE),\n      useExisting: wrapExpression(facade, USE_EXISTING),\n      ctorDeps: convertR3DependencyMetadataArray(facade.ctorDeps),\n      userDeps: convertR3DependencyMetadataArray(facade.userDeps) || undefined,\n    });\n\n    return jitExpression(expression, angularCoreEnv, sourceMapUrl, statements);\n  }\n\n  compileInjector(\n      angularCoreEnv: CoreEnvironment, sourceMapUrl: string,\n      facade: R3InjectorMetadataFacade): any {\n    const meta: R3InjectorMetadata = {\n      name: facade.name,\n      type: new WrappedNodeExpr(facade.type),\n      deps: convertR3DependencyMetadataArray(facade.deps),\n      providers: new WrappedNodeExpr(facade.providers),\n      imports: new WrappedNodeExpr(facade.imports),\n    };\n    const res = compileInjector(meta);\n    return jitExpression(res.expression, angularCoreEnv, sourceMapUrl, res.statements);\n  }\n\n  compileNgModule(\n      angularCoreEnv: CoreEnvironment, sourceMapUrl: string,\n      facade: R3NgModuleMetadataFacade): any {\n    const meta: R3NgModuleMetadata = {\n      type: new WrappedNodeExpr(facade.type),\n      bootstrap: facade.bootstrap.map(wrapReference),\n      declarations: facade.declarations.map(wrapReference),\n      imports: facade.imports.map(wrapReference),\n      exports: facade.exports.map(wrapReference),\n      emitInline: true,\n    };\n    const res = compileNgModule(meta);\n    return jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n  }\n\n  compileDirective(\n      angularCoreEnv: CoreEnvironment, sourceMapUrl: string,\n      facade: R3DirectiveMetadataFacade): any {\n    const constantPool = new ConstantPool();\n    const bindingParser = makeBindingParser();\n\n    const meta: R3DirectiveMetadata = convertDirectiveFacadeToMetadata(facade);\n    const res = compileDirectiveFromMetadata(meta, constantPool, bindingParser);\n    const preStatements = [...constantPool.statements, ...res.statements];\n    return jitExpression(res.expression, angularCoreEnv, sourceMapUrl, preStatements);\n  }\n\n  compileComponent(\n      angularCoreEnv: CoreEnvironment, sourceMapUrl: string,\n      facade: R3ComponentMetadataFacade): any {\n    // The ConstantPool is a requirement of the JIT'er.\n    const constantPool = new ConstantPool();\n\n    // Parse the template and check for errors.\n    const template = parseTemplate(\n        facade.template, sourceMapUrl, {\n          preserveWhitespaces: facade.preserveWhitespaces || false,\n        },\n        '');\n    if (template.errors !== undefined) {\n      const errors = template.errors.map(err => err.toString()).join(', ');\n      throw new Error(`Errors during JIT compilation of template for ${facade.name}: ${errors}`);\n    }\n\n    // Compile the component metadata, including template, into an expression.\n    // TODO(alxhub): implement inputs, outputs, queries, etc.\n    const res = compileComponentFromMetadata(\n        {\n          ...facade as R3ComponentMetadataFacadeNoPropAndWhitespace,\n          ...convertDirectiveFacadeToMetadata(facade),\n          template,\n          viewQueries: facade.viewQueries.map(convertToR3QueryMetadata),\n          wrapDirectivesAndPipesInClosure: false,\n          styles: facade.styles || [],\n          encapsulation: facade.encapsulation as any,\n          animations: facade.animations != null ? new WrappedNodeExpr(facade.animations) : null,\n          viewProviders: facade.viewProviders != null ? new WrappedNodeExpr(facade.viewProviders) :\n                                                        null,\n        },\n        constantPool, makeBindingParser());\n    const preStatements = [...constantPool.statements, ...res.statements];\n\n    return jitExpression(res.expression, angularCoreEnv, sourceMapUrl, preStatements);\n  }\n}\n\n// This seems to be needed to placate TS v3.0 only\ntype R3ComponentMetadataFacadeNoPropAndWhitespace = Pick<\n    R3ComponentMetadataFacade,\n    Exclude<Exclude<keyof R3ComponentMetadataFacade, 'preserveWhitespaces'>, 'propMetadata'>>;\n\nconst USE_CLASS = Object.keys({useClass: null})[0];\nconst USE_FACTORY = Object.keys({useFactory: null})[0];\nconst USE_VALUE = Object.keys({useValue: null})[0];\nconst USE_EXISTING = Object.keys({useExisting: null})[0];\n\nconst wrapReference = function(value: Type): R3Reference {\n  const wrapped = new WrappedNodeExpr(value);\n  return {value: wrapped, type: wrapped};\n};\n\nfunction convertToR3QueryMetadata(facade: R3QueryMetadataFacade): R3QueryMetadata {\n  return {\n    ...facade,\n    predicate: Array.isArray(facade.predicate) ? facade.predicate :\n                                                 new WrappedNodeExpr(facade.predicate),\n    read: facade.read ? new WrappedNodeExpr(facade.read) : null,\n  };\n}\n\nfunction convertDirectiveFacadeToMetadata(facade: R3DirectiveMetadataFacade): R3DirectiveMetadata {\n  const inputsFromMetadata = parseInputOutputs(facade.inputs || []);\n  const outputsFromMetadata = parseInputOutputs(facade.outputs || []);\n  const propMetadata = facade.propMetadata;\n  const inputsFromType: StringMapWithRename = {};\n  const outputsFromType: StringMap = {};\n  for (const field in propMetadata) {\n    if (propMetadata.hasOwnProperty(field)) {\n      propMetadata[field].forEach(ann => {\n        if (isInput(ann)) {\n          inputsFromType[field] =\n              ann.bindingPropertyName ? [ann.bindingPropertyName, field] : field;\n        } else if (isOutput(ann)) {\n          outputsFromType[field] = ann.bindingPropertyName || field;\n        }\n      });\n    }\n  }\n\n  return {\n    ...facade as R3DirectiveMetadataFacadeNoPropAndWhitespace,\n    typeSourceSpan: null !,\n    type: new WrappedNodeExpr(facade.type),\n    deps: convertR3DependencyMetadataArray(facade.deps),\n    host: extractHostBindings(facade.host, facade.propMetadata),\n    inputs: {...inputsFromMetadata, ...inputsFromType},\n    outputs: {...outputsFromMetadata, ...outputsFromType},\n    providers: facade.providers != null ? new WrappedNodeExpr(facade.providers) : null,\n  };\n}\n\n// This seems to be needed to placate TS v3.0 only\ntype R3DirectiveMetadataFacadeNoPropAndWhitespace =\n    Pick<R3DirectiveMetadataFacade, Exclude<keyof R3DirectiveMetadataFacade, 'propMetadata'>>;\n\nfunction wrapExpression(obj: any, property: string): WrappedNodeExpr<any>|undefined {\n  if (obj.hasOwnProperty(property)) {\n    return new WrappedNodeExpr(obj[property]);\n  } else {\n    return undefined;\n  }\n}\n\nfunction computeProvidedIn(providedIn: Type | string | null | undefined): Expression {\n  if (providedIn == null || typeof providedIn === 'string') {\n    return new LiteralExpr(providedIn);\n  } else {\n    return new WrappedNodeExpr(providedIn);\n  }\n}\n\nfunction convertR3DependencyMetadata(facade: R3DependencyMetadataFacade): R3DependencyMetadata {\n  let tokenExpr;\n  if (facade.token === null) {\n    tokenExpr = new LiteralExpr(null);\n  } else if (facade.resolved === R3ResolvedDependencyType.Attribute) {\n    tokenExpr = new LiteralExpr(facade.token);\n  } else {\n    tokenExpr = new WrappedNodeExpr(facade.token);\n  }\n  return {\n    token: tokenExpr,\n    resolved: facade.resolved,\n    host: facade.host,\n    optional: facade.optional,\n    self: facade.self,\n    skipSelf: facade.skipSelf\n  };\n}\n\nfunction convertR3DependencyMetadataArray(facades: R3DependencyMetadataFacade[] | null | undefined):\n    R3DependencyMetadata[]|null {\n  return facades == null ? null : facades.map(convertR3DependencyMetadata);\n}\n\nfunction extractHostBindings(host: {[key: string]: string}, propMetadata: {[key: string]: any[]}): {\n  attributes: StringMap,\n  listeners: StringMap,\n  properties: StringMap,\n} {\n  // First parse the declarations from the metadata.\n  const {attributes, listeners, properties, animations} = parseHostBindings(host || {});\n\n  if (Object.keys(animations).length > 0) {\n    throw new Error(`Animation bindings are as-of-yet unsupported in Ivy`);\n  }\n\n  // Next, loop over the properties of the object, looking for @HostBinding and @HostListener.\n  for (const field in propMetadata) {\n    if (propMetadata.hasOwnProperty(field)) {\n      propMetadata[field].forEach(ann => {\n        if (isHostBinding(ann)) {\n          properties[ann.hostPropertyName || field] = field;\n        } else if (isHostListener(ann)) {\n          listeners[ann.eventName || field] = `${field}(${(ann.args || []).join(',')})`;\n        }\n      });\n    }\n  }\n\n  return {attributes, listeners, properties};\n}\n\nfunction isHostBinding(value: any): value is HostBinding {\n  return value.ngMetadataName === 'HostBinding';\n}\n\nfunction isHostListener(value: any): value is HostListener {\n  return value.ngMetadataName === 'HostListener';\n}\n\n\nfunction isInput(value: any): value is Input {\n  return value.ngMetadataName === 'Input';\n}\n\nfunction isOutput(value: any): value is Output {\n  return value.ngMetadataName === 'Output';\n}\n\nfunction parseInputOutputs(values: string[]): StringMap {\n  return values.reduce(\n      (map, value) => {\n        const [field, property] = value.split(',').map(piece => piece.trim());\n        map[field] = property || field;\n        return map;\n      },\n      {} as StringMap);\n}\n\nexport function publishFacade(global: any) {\n  const ng: ExportedCompilerFacade = global.ng || (global.ng = {});\n  ng.ɵcompilerFacade = new CompilerFacadeImpl();\n}"]}